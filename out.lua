-- Generated by Haxe 4.0.0-preview.4
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Date = _hx_e()
__lua_lib_lrexlib_Rex = _G.require("rex_pcre")
__lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local EReg = _hx_e()
local Lambda = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local Sys = _hx_e()
local ValueType = _hx_e()
local Type = _hx_e()
local WhenDid = _hx_e()
__com_hurlant_crypto_encoding_Charset = _hx_e()
__com_hurlant_crypto_encoding_ASCII = _hx_e()
__com_hurlant_util_Endian = _hx_e()
__com_hurlant_crypto_encoding_UTF16 = _hx_e()
__com_hurlant_crypto_encoding_UTF8 = _hx_e()
__com_hurlant_crypto_encoding_Charsets = _hx_e()
__com_hurlant_crypto_encoding_binary_BinaryEncoding = _hx_e()
__com_hurlant_crypto_encoding_binary_Base16 = _hx_e()
__com_hurlant_crypto_encoding_binary_Base64 = _hx_e()
__com_hurlant_crypto_encoding_binary_BinaryEncodings = _hx_e()
__com_hurlant_crypto_extra_UUID = _hx_e()
__com_hurlant_crypto_extra_Variant = _hx_e()
__com_hurlant_crypto_symmetric_ICipher = _hx_e()
__com_hurlant_crypto_symmetric_IStreamCipher = _hx_e()
__com_hurlant_crypto_prng_IPRNG = _hx_e()
__com_hurlant_crypto_prng_ARC4 = _hx_e()
__com_hurlant_crypto_prng_IRandom = _hx_e()
__com_hurlant_crypto_prng_Random = _hx_e()
__com_hurlant_crypto_prng_SecureRandom = _hx_e()
__com_hurlant_util_ArrayUtil = _hx_e()
__com_hurlant_util_Base64 = _hx_e()
__com_hurlant_util_Bits = _hx_e()
__com_hurlant_util__ByteArray_ByteArray_Impl_ = _hx_e()
__com_hurlant_util_IDataInput = _hx_e()
__com_hurlant_util_IDataOutput = _hx_e()
__com_hurlant_util_ByteArrayData = _hx_e()
__com_hurlant_util_CType = _hx_e()
__com_hurlant_util_Error = _hx_e()
__com_hurlant_util_Hex = _hx_e()
__com_hurlant_util_Memory = _hx_e()
__com_hurlant_util_Std2 = _hx_e()
__haxe_IMap = _hx_e()
__haxe__Int32_Int32_Impl_ = _hx_e()
__haxe_Json = _hx_e()
__haxe_Log = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_format_JsonPrinter = _hx_e()
__haxe_io_Bytes = _hx_e()
__haxe_io_BytesBuffer = _hx_e()
__haxe_io_Encoding = _hx_e()
__haxe_io_Eof = _hx_e()
__haxe_io_Error = _hx_e()
__haxe_io_Input = _hx_e()
__haxe_io_Output = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Lib = _hx_e()
__lua_Thread = _hx_e()
__lua_lib_luv_Loop = _G.require("luv")
__lua_lib_luv_Pipe = _G.require("luv")
__lua_lib_luv_Process = _G.require("luv")
__lua_lib_luv_fs_FileSystem = _G.require("luv")
__sys_FileSystem = _hx_e()
__sys_io_File = _hx_e()
__sys_io_FileInput = _hx_e()
__sys_io_FileOutput = _hx_e()
__sys_io_Process = _hx_e()
__sys_io__Process_ProcessInput = _hx_e()
__sys_io__Process_ProcessOutput = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_a();
Array.prototype.length= nil;
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    ret:push(i1);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    local i1 = i:next();
    _G.table.insert(tbl, Std.string(i1));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g2 = pos + len;
  local _g3 = self.length;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i1 = _g2 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g2 = i;
      local _g11 = self.length - 1;
      while (_g2 < _g11) do 
        _g2 = _g2 + 1;
        local j = _g2 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
end
Date.__name__ = true
Date.now = function() 
  local t = _G.os.time() * 1000;
  local d = _hx_e();
  _G.setmetatable(d, _hx_o({__fields__={__index=true},__index=Date.prototype}));
  d.t = t / 1000;
  d.d = _G.os.date("*t", Std.int(d.t));
  do return d end;
end
Date.fromTime = function(t) 
  local d = _hx_e();
  _G.setmetatable(d, _hx_o({__fields__={__index=true},__index=Date.prototype}));
  d.t = t / 1000;
  d.d = _G.os.date("*t", Std.int(d.t));
  do return d end;
end
Date.fromString = function(s) 
  do return __lua_Boot.strDate(s) end;
end
Date.prototype = _hx_a();
Date.prototype.d= nil;
Date.prototype.t= nil;
Date.prototype.getTime = function(self) 
  do return self.t * 1000 end
end
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end

Date.prototype.__class__ =  Date

EReg.new = function(r,opt) 
  local self = _hx_new(EReg.prototype)
  EReg.super(self,r,opt)
  return self
end
EReg.super = function(self,r,opt) 
  local ropt = 0;
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(opt);
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local _g2 = __lua_lib_luautf8_Utf8.sub(opt, i + 1, i + 1);
    if (_g2) == "g" then 
      self.global = true;
    elseif (_g2) == "i" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.CASELESS);
    elseif (_g2) == "m" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.MULTILINE);
    elseif (_g2) == "s" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.DOTALL);
    elseif (_g2) == "u" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.UTF8);else end;
  end;
  if (self.global == nil) then 
    self.global = false;
  end;
  self.r = __lua_lib_lrexlib_Rex.new(r, ropt);
end
EReg.__name__ = true
EReg.prototype = _hx_a();
EReg.prototype.r= nil;
EReg.prototype.global= nil;
EReg.prototype.s= nil;
EReg.prototype.m= nil;
EReg.prototype.match = function(self,s) 
  if (s == nil) then 
    do return false end;
  end;
  self.m = _hx_table.pack(self.r:exec(s));
  self.s = s;
  do return self.m[1] ~= nil end
end
EReg.prototype.split = function(self,s) 
  if (self.global) then 
    do return __lua_Lib.fillArray(_hx_wrap_if_string_field(__lua_lib_lrexlib_Rex,'split')(s, self.r)) end;
  else
    local d = "#__delim__#";
    do return __lua_Lib.fillArray(_hx_wrap_if_string_field(__lua_lib_lrexlib_Rex,'split')(self:replace(s, d), d)) end;
  end;
end
EReg.prototype.replace = function(self,s,by) 
  by = __lua_lib_lrexlib_Rex.gsub(by, "\\$(\\d)", "%%%1");
  by = __lua_lib_lrexlib_Rex.gsub(by, "\\${2}", "$");
  do return __lua_lib_lrexlib_Rex.gsub(s, self.r, by, (function() 
    local _hx_1
    if (self.global) then 
    _hx_1 = nil; else 
    _hx_1 = 1; end
    return _hx_1
  end )()) end
end

EReg.prototype.__class__ =  EReg

Lambda.new = {}
Lambda.__name__ = true
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do 
    local x1 = x:next();
    if (x1 == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

Main.new = {}
Main.__name__ = true
Main.main = function() 
  WhenDid.log("foo", 2);
end

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _G.string.len(o) end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
    
      local _hx_1 = _hx_result
      local e = _hx_1
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  if (_G.type(o) == "string") then 
    do return Reflect.fields(String.prototype) end;
  else
    local _g = _hx_tab_array({}, 0);
    local f = __lua_Boot.fieldIterator(o);
    while (f:hasNext()) do 
      local f1 = f:next();
      _g:push(f1);
    end;
    do return _g end;
  end;
end
Reflect.isFunction = function(f) 
  if (_G.type(f) == "function") then 
    do return not ((function() 
      local _hx_1
      if (_G.type(f) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = f.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(f) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = f.__ename__; end
      return _hx_2
    end )()) end;
  else
    do return false end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_a();
String.prototype.length= nil;
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local i = 0;
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  local delim_offset = (function() 
    local _hx_1
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
    _hx_1 = __lua_lib_luautf8_Utf8.len(delimiter); else 
    _hx_1 = 1; end
    return _hx_1
  end )();
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.random = function(x) 
  if (x <= 0) then 
    do return 0 end;
  else
    do return _G.math.floor(_G.math.random() * x) end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
StringBuf.__name__ = true
StringBuf.prototype = _hx_a();
StringBuf.prototype.b= nil;
StringBuf.prototype.length= nil;

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
StringTools.__name__ = true
StringTools.lpad = function(s,c,l) 
  if (__lua_lib_luautf8_Utf8.len(c) <= 0) then 
    do return s end;
  end;
  while (__lua_lib_luautf8_Utf8.len(s) < l) do 
    s = Std.string(c) .. Std.string(s);
  end;
  do return s end;
end
StringTools.replace = function(s,sub,by) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  local delim_offset = (function() 
    local _hx_1
    if (__lua_lib_luautf8_Utf8.len(sub) > 0) then 
    _hx_1 = __lua_lib_luautf8_Utf8.len(sub); else 
    _hx_1 = 1; end
    return _hx_1
  end )();
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(sub) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(s, sub, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(s)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(s, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(sub);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(s, idx, __lua_lib_luautf8_Utf8.len(s)));
      idx = nil;
    end;
  end;
  do return ret:join(by) end;
end
StringTools.quoteUnixArg = function(argument) 
  if (argument == "") then 
    do return "''" end;
  end;
  if (not EReg.new("[^a-zA-Z0-9_@%+=:,./-]", ""):match(argument)) then 
    do return argument end;
  end;
  do return Std.string(Std.string("'") .. Std.string(StringTools.replace(argument, "'", "'\"'\"'"))) .. Std.string("'") end;
end
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) 
  if (not EReg.new("^[^ \t\\\\\"]+$", ""):match(argument)) then 
    local result_b = ({});
    local result_length = 0;
    local needquote;
    local startIndex = nil;
    if (startIndex == nil) then 
      startIndex = 1;
    else
      startIndex = startIndex + 1;
    end;
    local r = __lua_lib_luautf8_Utf8.find(argument, " ", startIndex, true);
    if ((function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )() == -1) then 
      local startIndex1 = nil;
      if (startIndex1 == nil) then 
        startIndex1 = 1;
      else
        startIndex1 = startIndex1 + 1;
      end;
      local r1 = __lua_lib_luautf8_Utf8.find(argument, "\t", startIndex1, true);
      needquote = (function() 
        local _hx_2
        if ((r1 ~= nil) and (r1 > 0)) then 
        _hx_2 = r1 - 1; else 
        _hx_2 = -1; end
        return _hx_2
      end )() ~= -1;
    else
      needquote = true;
    end;
    local needquote1 = needquote or (argument == "");
    if (needquote1) then 
      local str = "\"";
      _G.table.insert(result_b, str);
      result_length = result_length + __lua_lib_luautf8_Utf8.len(str);
    end;
    local bs_buf = StringBuf.new();
    local _g = 0;
    local _g1 = __lua_lib_luautf8_Utf8.len(argument);
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      local _g2 = __lua_lib_luautf8_Utf8.byte(argument, i + 1);
      local _g3 = _g2;
      if (_g3) == 34 then 
        local bs = _G.table.concat(bs_buf.b);
        local str1 = Std.string(bs);
        _G.table.insert(result_b, str1);
        result_length = result_length + __lua_lib_luautf8_Utf8.len(str1);
        local str2 = Std.string(bs);
        _G.table.insert(result_b, str2);
        result_length = result_length + __lua_lib_luautf8_Utf8.len(str2);
        bs_buf = StringBuf.new();
        local str3 = "\\\"";
        _G.table.insert(result_b, str3);
        result_length = result_length + __lua_lib_luautf8_Utf8.len(str3);
      elseif (_g3) == 92 then 
        local str4 = "\\";
        _G.table.insert(bs_buf.b, str4);
        local bs_buf1 = bs_buf;
        bs_buf1.length = bs_buf1.length + __lua_lib_luautf8_Utf8.len(str4);else
      local c = _g2;
      if (bs_buf.length > 0) then 
        local str5 = Std.string(_G.table.concat(bs_buf.b));
        _G.table.insert(result_b, str5);
        result_length = result_length + __lua_lib_luautf8_Utf8.len(str5);
        bs_buf = StringBuf.new();
      end;
      _G.table.insert(result_b, __lua_lib_luautf8_Utf8.char(c));
      result_length = result_length + 1; end;
    end;
    local str6 = Std.string(_G.table.concat(bs_buf.b));
    _G.table.insert(result_b, str6);
    result_length = result_length + __lua_lib_luautf8_Utf8.len(str6);
    if (needquote1) then 
      local str7 = Std.string(_G.table.concat(bs_buf.b));
      _G.table.insert(result_b, str7);
      result_length = result_length + __lua_lib_luautf8_Utf8.len(str7);
      local str8 = "\"";
      _G.table.insert(result_b, str8);
      result_length = result_length + __lua_lib_luautf8_Utf8.len(str8);
    end;
    argument = _G.table.concat(result_b);
  end;
  if (escapeMetaCharacters) then 
    local result_b1 = ({});
    local result_length1 = 0;
    local _g4 = 0;
    local _g11 = __lua_lib_luautf8_Utf8.len(argument);
    while (_g4 < _g11) do 
      _g4 = _g4 + 1;
      local i1 = _g4 - 1;
      local c1 = __lua_lib_luautf8_Utf8.byte(argument, i1 + 1);
      if (StringTools.winMetaCharacters:indexOf(c1) >= 0) then 
        _G.table.insert(result_b1, __lua_lib_luautf8_Utf8.char(94));
        result_length1 = result_length1 + 1;
      end;
      _G.table.insert(result_b1, __lua_lib_luautf8_Utf8.char(c1));
      result_length1 = result_length1 + 1;
    end;
    do return _G.table.concat(result_b1) end;
  else
    do return argument end;
  end;
end

Sys.new = {}
Sys.__name__ = true
Sys.getSystemName = function() 
  do return __lua_Boot.systemName() end;
end
Sys.systemName = function() 
  if (Sys._system_name == nil) then 
    Sys._system_name = Sys.getSystemName();
  end;
  do return Sys._system_name end;
end
_hxClasses["ValueType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"},9)}
ValueType = _hxClasses["ValueType"];
ValueType.TNull = _hx_tab_array({[0]="TNull",0,__enum__ = ValueType},2)

ValueType.TInt = _hx_tab_array({[0]="TInt",1,__enum__ = ValueType},2)

ValueType.TFloat = _hx_tab_array({[0]="TFloat",2,__enum__ = ValueType},2)

ValueType.TBool = _hx_tab_array({[0]="TBool",3,__enum__ = ValueType},2)

ValueType.TObject = _hx_tab_array({[0]="TObject",4,__enum__ = ValueType},2)

ValueType.TFunction = _hx_tab_array({[0]="TFunction",5,__enum__ = ValueType},2)

ValueType.TClass = function(c) local _x = _hx_tab_array({[0]="TClass",6,c,__enum__=ValueType}, 3); return _x; end 
ValueType.TEnum = function(e) local _x = _hx_tab_array({[0]="TEnum",7,e,__enum__=ValueType}, 3); return _x; end 
ValueType.TUnknown = _hx_tab_array({[0]="TUnknown",8,__enum__ = ValueType},2)


Type.new = {}
Type.__name__ = true
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o1 = o;
  if (__lua_Boot.__instanceof(o1, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o1, String)) then 
      do return String end;
    else
      local cl = o1.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.getInstanceFields = function(c) 
  local p = c.prototype;
  local a = _hx_tab_array({}, 0);
  while (p ~= nil) do 
    local f = __lua_Boot.fieldIterator(p);
    while (f:hasNext()) do 
      local f1 = f:next();
      if (not Lambda.has(a, f1)) then 
        a:push(f1);
      end;
    end;
    local mt = _G.getmetatable(p);
    if ((mt ~= nil) and (mt.__index ~= nil)) then 
      p = mt.__index;
    else
      p = nil;
    end;
  end;
  do return a end;
end
Type.typeof = function(v) 
  local _g = _G.type(v);
  if (_g) == "boolean" then 
    do return ValueType.TBool end;
  elseif (_g) == "function" then 
    if ((function() 
      local _hx_1
      if (_G.type(v) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = v.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(v) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = v.__ename__; end
      return _hx_2
    end )()) then 
      do return ValueType.TObject end;
    end;
    do return ValueType.TFunction end;
  elseif (_g) == "nil" then 
    do return ValueType.TNull end;
  elseif (_g) == "number" then 
    if (_G.math.ceil(v) == (_G.math.fmod(v, 2147483648.0))) then 
      do return ValueType.TInt end;
    end;
    do return ValueType.TFloat end;
  elseif (_g) == "string" then 
    do return ValueType.TClass(String) end;
  elseif (_g) == "table" then 
    local e = v.__enum__;
    if (e ~= nil) then 
      do return ValueType.TEnum(e) end;
    end;
    local c;
    if (__lua_Boot.__instanceof(v, Array)) then 
      c = Array;
    else
      if (__lua_Boot.__instanceof(v, String)) then 
        c = String;
      else
        local cl = v.__class__;
        c = (function() 
          local _hx_3
          if (cl ~= nil) then 
          _hx_3 = cl; else 
          _hx_3 = nil; end
          return _hx_3
        end )();
      end;
    end;
    if (c ~= nil) then 
      do return ValueType.TClass(c) end;
    end;
    do return ValueType.TObject end;else
  do return ValueType.TUnknown end; end;
end

WhenDid.new = {}
WhenDid.__name__ = true
WhenDid.shell = function(cmd) 
  local args = EReg.new("\\s+", ""):split(cmd);
  local cmd1 = args:shift();
  local p = __sys_io_Process.new(cmd1, args);
  local exit = p:exitCode(true);
  if (exit ~= 0) then 
    _G.error(Std.string("Error : ") .. Std.string(p.stderr:readAll():toString()),0);
  end;
  do return p.stdout:readAll():toString() end;
end
WhenDid.git = function(args) 
  do return WhenDid.shell(Std.string(Std.string("git ") .. Std.string(args)) .. Std.string(" --git-dir=.whendid")) end;
end
WhenDid.commit = function(branch) 
  WhenDid.git("add .");
  WhenDid.git(Std.string(Std.string("commit -m ") .. Std.string(branch)) .. Std.string(" --quiet"));
  WhenDid.git("checkout master --quiet");
  WhenDid.git(Std.string(Std.string("merge ") .. Std.string(branch)) .. Std.string(" --quiet"));
  WhenDid.git(Std.string(Std.string("branch -d ") .. Std.string(branch)) .. Std.string(" --quiet"));
end
WhenDid.checkStatus = function() 
  do return false end;
end
WhenDid.log = function(metric,value) 
  local random = __com_hurlant_crypto_prng_Random.new();
  local _this = __com_hurlant_crypto_extra_UUID.generateRandom(random):toString();
  local pos = 0;
  local len = 8;
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(_this)))) then 
    len = __lua_lib_luautf8_Utf8.len(_this);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(_this) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(_this) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  local branch = __lua_lib_luautf8_Utf8.sub(_this, pos + 1, pos + len);
  __haxe_Log.trace(Std.string(branch) .. Std.string(" is the value for branch"), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/WhenDid.hx",lineNumber=33,className="WhenDid",methodName="log"}));
  local fout = __sys_io_File.append("whendid.log");
  local result = __lua_lib_luv_fs_FileSystem.fs_stat(".whendid");
  if (not ((function() 
    local _hx_1
    if (result == nil) then 
    _hx_1 = false; else 
    _hx_1 = result.type == "directory"; end
    return _hx_1
  end )())) then 
    WhenDid.init();
    local metric1 = __haxe_Json.stringify(_hx_o({__fields__={metric=true,value=true},metric=metric,value=value}));
    fout:writeString(Std.string(Std.string(Std.string(Std.string("") .. Std.string(branch)) .. Std.string(" ")) .. Std.string(metric1)) .. Std.string("\n"));
    fout:close();
  else
    if (not WhenDid.checkStatus()) then 
      __haxe_Log.trace("HI", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/WhenDid.hx",lineNumber=42,className="WhenDid",methodName="log"}));
    end;
  end;
end
WhenDid.init = function() 
  WhenDid.shell("echo '.whendid' >> .gitignore");
  WhenDid.shell("git init --separate-git-dir .whendid");
  WhenDid.git("add .");
  WhenDid.git("commit -m 'whendid-head'");
end

__com_hurlant_crypto_encoding_Charset.new = {}
__com_hurlant_crypto_encoding_Charset.__name__ = true
__com_hurlant_crypto_encoding_Charset.prototype = _hx_a();
__com_hurlant_crypto_encoding_Charset.prototype.encode= nil;
__com_hurlant_crypto_encoding_Charset.prototype.decode= nil;

__com_hurlant_crypto_encoding_Charset.prototype.__class__ =  __com_hurlant_crypto_encoding_Charset

__com_hurlant_crypto_encoding_ASCII.new = function() 
  local self = _hx_new(__com_hurlant_crypto_encoding_ASCII.prototype)
  __com_hurlant_crypto_encoding_ASCII.super(self)
  return self
end
__com_hurlant_crypto_encoding_ASCII.super = function(self) 
end
__com_hurlant_crypto_encoding_ASCII.__name__ = true
__com_hurlant_crypto_encoding_ASCII.__interfaces__ = {__com_hurlant_crypto_encoding_Charset}
__com_hurlant_crypto_encoding_ASCII.prototype = _hx_a();
__com_hurlant_crypto_encoding_ASCII.prototype.encode = function(self,input) 
  local out = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(input);
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, __lua_lib_luautf8_Utf8.byte(input, n + 1));
  end;
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(out) end
end
__com_hurlant_crypto_encoding_ASCII.prototype.decode = function(self,bytes) 
  local out = "";
  local _g = 0;
  local _g1 = bytes.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    out = Std.string(out) .. Std.string(__lua_lib_luautf8_Utf8.char(bytes.b[n]));
  end;
  do return out end
end

__com_hurlant_crypto_encoding_ASCII.prototype.__class__ =  __com_hurlant_crypto_encoding_ASCII
_hxClasses["com.hurlant.util.Endian"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="LITTLE_ENDIAN","BIG_ENDIAN"},2)}
__com_hurlant_util_Endian = _hxClasses["com.hurlant.util.Endian"];
__com_hurlant_util_Endian.LITTLE_ENDIAN = _hx_tab_array({[0]="LITTLE_ENDIAN",0,__enum__ = __com_hurlant_util_Endian},2)

__com_hurlant_util_Endian.BIG_ENDIAN = _hx_tab_array({[0]="BIG_ENDIAN",1,__enum__ = __com_hurlant_util_Endian},2)


__com_hurlant_crypto_encoding_UTF16.new = function(endian) 
  local self = _hx_new(__com_hurlant_crypto_encoding_UTF16.prototype)
  __com_hurlant_crypto_encoding_UTF16.super(self,endian)
  return self
end
__com_hurlant_crypto_encoding_UTF16.super = function(self,endian) 
  self.endian = endian;
end
__com_hurlant_crypto_encoding_UTF16.__name__ = true
__com_hurlant_crypto_encoding_UTF16.__interfaces__ = {__com_hurlant_crypto_encoding_Charset}
__com_hurlant_crypto_encoding_UTF16.prototype = _hx_a();
__com_hurlant_crypto_encoding_UTF16.prototype.endian= nil;
__com_hurlant_crypto_encoding_UTF16.prototype.encode = function(self,input) 
  local out = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_endian(out, self.endian);
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(input);
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.writeShort(out, __lua_lib_luautf8_Utf8.byte(input, n + 1));
  end;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(out, 0);
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(out) end
end
__com_hurlant_crypto_encoding_UTF16.prototype.decode = function(self,input) 
  local i = __com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(input);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_endian(i, self.endian);
  local out = "";
  while (__com_hurlant_util__ByteArray_ByteArray_Impl_.get_bytesAvailable(i) > 0) do 
    out = Std.string(out) .. Std.string(__lua_lib_luautf8_Utf8.char(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedShort(i)));
  end;
  do return out end
end

__com_hurlant_crypto_encoding_UTF16.prototype.__class__ =  __com_hurlant_crypto_encoding_UTF16

__com_hurlant_crypto_encoding_UTF8.new = function() 
  local self = _hx_new(__com_hurlant_crypto_encoding_UTF8.prototype)
  __com_hurlant_crypto_encoding_UTF8.super(self)
  return self
end
__com_hurlant_crypto_encoding_UTF8.super = function(self) 
end
__com_hurlant_crypto_encoding_UTF8.__name__ = true
__com_hurlant_crypto_encoding_UTF8.__interfaces__ = {__com_hurlant_crypto_encoding_Charset}
__com_hurlant_crypto_encoding_UTF8.prototype = _hx_a();
__com_hurlant_crypto_encoding_UTF8.prototype.encode = function(self,input) 
  local out = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(input);
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    local c = __lua_lib_luautf8_Utf8.byte(input, n + 1);
    if ((_hx_bit.band(c,-128)) == 0) then 
      __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, c);
    else
      if ((_hx_bit.band(c,-2048)) == 0) then 
        __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(_hx_bit.arshift(c,6),31),192));
        __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(c,63),128));
      else
        if ((_hx_bit.band(c,-65536)) == 0) then 
          __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(_hx_bit.arshift(c,12),15),224));
          __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(_hx_bit.arshift(c,6),63),128));
          __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(c,63),128));
        else
          if ((_hx_bit.band(c,-2097152)) == 0) then 
            __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(_hx_bit.arshift(c,18),7),240));
            __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(_hx_bit.arshift(c,12),63),128));
            __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(_hx_bit.arshift(c,6),63),128));
            __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(out, _hx_bit.bor(_hx_bit.band(c,63),128));
          end;
        end;
      end;
    end;
  end;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(out, 0);
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(out) end
end
__com_hurlant_crypto_encoding_UTF8.prototype.decode = function(self,input) 
  local bytes = __com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(input);
  local out = "";
  while (__com_hurlant_util__ByteArray_ByteArray_Impl_.get_bytesAvailable(bytes) > 0) do 
    local byte1 = __com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte(bytes);
    local codePoint = 0;
    if ((_hx_bit.band(byte1,128)) == 0) then 
      codePoint = byte1;
    else
      if ((_hx_bit.band(byte1,224)) == 192) then 
        local byte2 = _hx_bit.band(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte(bytes),127);
        codePoint = __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(byte1,31)),6)), byte2);
        if (codePoint < 128) then 
          _G.error("Invalid continuation byte",0);
        end;
      else
        if ((_hx_bit.band(byte1,240)) == 224) then 
          local byte21 = _hx_bit.band(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte(bytes),127);
          local byte3 = _hx_bit.band(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte(bytes),127);
          codePoint = __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(byte1,15)),12)), __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(byte21,6))), byte3);
          if (codePoint < 2048) then 
            _G.error("Invalid continuation byte",0);
          end;
        else
          if ((_hx_bit.band(byte1,248)) == 240) then 
            local byte22 = _hx_bit.band(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte(bytes),127);
            local byte31 = _hx_bit.band(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte(bytes),127);
            local byte4 = _hx_bit.band(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte(bytes),127);
            codePoint = __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(byte1,15)),18)), __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(byte22,12))), __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(byte31,6))), byte4);
            if ((codePoint < 65536) or (codePoint > 1114111)) then 
              _G.error("Invalid continuation byte",0);
            end;
          end;
        end;
      end;
    end;
    out = Std.string(out) .. Std.string(__lua_lib_luautf8_Utf8.char(codePoint));
  end;
  do return out end
end

__com_hurlant_crypto_encoding_UTF8.prototype.__class__ =  __com_hurlant_crypto_encoding_UTF8

__com_hurlant_crypto_encoding_Charsets.new = {}
__com_hurlant_crypto_encoding_Charsets.__name__ = true
__com_hurlant_crypto_encoding_Charsets.fromString = function(name) 
  local _g = __lua_lib_luautf8_Utf8.lower(name);
  if (_g) == "ascii" then 
    do return __com_hurlant_crypto_encoding_Charsets.ASCII end;
  elseif (_g) == "iso-8859-1" or (_g) == "latin1" then 
    do return __com_hurlant_crypto_encoding_Charsets.ASCII end;
  elseif (_g) == "ucs-2le" or (_g) == "ucs2le" or (_g) == "utf-16le" or (_g) == "utf16le" then 
    do return __com_hurlant_crypto_encoding_Charsets.UTF16_LE end;
  elseif (_g) == "ucs-2be" or (_g) == "ucs2be" or (_g) == "utf-16be" or (_g) == "utf16be" then 
    do return __com_hurlant_crypto_encoding_Charsets.UTF16_BE end;
  elseif (_g) == "ucs-2" or (_g) == "ucs2" or (_g) == "utf-16" or (_g) == "utf16" then 
    do return __com_hurlant_crypto_encoding_Charsets.UTF16 end;
  elseif (_g) == "utf-8" or (_g) == "utf8" then 
    do return __com_hurlant_crypto_encoding_Charsets.UTF8 end;else
  _G.error(Std.string(Std.string("Not supported encoding \"") .. Std.string(name)) .. Std.string("\""),0); end;
end

__com_hurlant_crypto_encoding_binary_BinaryEncoding.new = {}
__com_hurlant_crypto_encoding_binary_BinaryEncoding.__name__ = true
__com_hurlant_crypto_encoding_binary_BinaryEncoding.prototype = _hx_a();
__com_hurlant_crypto_encoding_binary_BinaryEncoding.prototype.encode= nil;
__com_hurlant_crypto_encoding_binary_BinaryEncoding.prototype.decode= nil;

__com_hurlant_crypto_encoding_binary_BinaryEncoding.prototype.__class__ =  __com_hurlant_crypto_encoding_binary_BinaryEncoding

__com_hurlant_crypto_encoding_binary_Base16.new = function() 
  local self = _hx_new(__com_hurlant_crypto_encoding_binary_Base16.prototype)
  __com_hurlant_crypto_encoding_binary_Base16.super(self)
  return self
end
__com_hurlant_crypto_encoding_binary_Base16.super = function(self) 
end
__com_hurlant_crypto_encoding_binary_Base16.__name__ = true
__com_hurlant_crypto_encoding_binary_Base16.__interfaces__ = {__com_hurlant_crypto_encoding_binary_BinaryEncoding}
__com_hurlant_crypto_encoding_binary_Base16.prototype = _hx_a();
__com_hurlant_crypto_encoding_binary_Base16.prototype.encode = function(self,input) 
  do return __com_hurlant_util_Hex.fromArray(__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(input)) end
end
__com_hurlant_crypto_encoding_binary_Base16.prototype.decode = function(self,input) 
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(__com_hurlant_util_Hex.toArray(input)) end
end

__com_hurlant_crypto_encoding_binary_Base16.prototype.__class__ =  __com_hurlant_crypto_encoding_binary_Base16

__com_hurlant_crypto_encoding_binary_Base64.new = function() 
  local self = _hx_new(__com_hurlant_crypto_encoding_binary_Base64.prototype)
  __com_hurlant_crypto_encoding_binary_Base64.super(self)
  return self
end
__com_hurlant_crypto_encoding_binary_Base64.super = function(self) 
end
__com_hurlant_crypto_encoding_binary_Base64.__name__ = true
__com_hurlant_crypto_encoding_binary_Base64.__interfaces__ = {__com_hurlant_crypto_encoding_binary_BinaryEncoding}
__com_hurlant_crypto_encoding_binary_Base64.prototype = _hx_a();
__com_hurlant_crypto_encoding_binary_Base64.prototype.encode = function(self,input) 
  do return __com_hurlant_util_Base64.encodeByteArray(__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(input)) end
end
__com_hurlant_crypto_encoding_binary_Base64.prototype.decode = function(self,input) 
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(__com_hurlant_util_Base64.decodeToByteArray(input)) end
end

__com_hurlant_crypto_encoding_binary_Base64.prototype.__class__ =  __com_hurlant_crypto_encoding_binary_Base64

__com_hurlant_crypto_encoding_binary_BinaryEncodings.new = {}
__com_hurlant_crypto_encoding_binary_BinaryEncodings.__name__ = true
__com_hurlant_crypto_encoding_binary_BinaryEncodings.fromString = function(name) 
  local _g = __lua_lib_luautf8_Utf8.lower(name);
  if (_g) == "base16" or (_g) == "hex" then 
    do return __com_hurlant_crypto_encoding_binary_BinaryEncodings.BASE16 end;
  elseif (_g) == "base64" then 
    do return __com_hurlant_crypto_encoding_binary_BinaryEncodings.BASE64 end;else
  _G.error(Std.string("Unknown binary encoding ") .. Std.string(name),0); end;
end

__com_hurlant_crypto_extra_UUID.new = function(bytes) 
  local self = _hx_new(__com_hurlant_crypto_extra_UUID.prototype)
  __com_hurlant_crypto_extra_UUID.super(self,bytes)
  return self
end
__com_hurlant_crypto_extra_UUID.super = function(self,bytes) 
  if (bytes.length ~= 16) then 
    _G.error(__com_hurlant_util_Error.new(Std.string("UUID must have 16 bytes by has ") .. Std.string(bytes.length)),0);
  end;
  self.bytes = bytes;
end
__com_hurlant_crypto_extra_UUID.__name__ = true
__com_hurlant_crypto_extra_UUID.fromParts = function(a,b,c,v0,v1,v2,v3,v4,v5,v6,v7) 
  local ba = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeUnsignedInt(ba, a);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeShort(ba, b);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeShort(ba, c);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v0);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v1);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v2);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v3);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v4);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v5);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v6);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(ba, v7);
  do return __com_hurlant_crypto_extra_UUID.new(__com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(ba)) end;
end
__com_hurlant_crypto_extra_UUID.fromString = function(str) 
  do return __com_hurlant_crypto_extra_UUID.new(__com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(__com_hurlant_util_Hex.toArray(StringTools.replace(str, "-", "")))) end;
end
__com_hurlant_crypto_extra_UUID.generateRandom = function(random) 
  local bytes = __com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(__com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(random:getRandomBytes(16)));
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(bytes, 8, __com_hurlant_util_Bits.insert(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(bytes, 8), 6, 2, 2));
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(bytes, 6, __com_hurlant_util_Bits.insert(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(bytes, 6), 4, 4, 4));
  do return __com_hurlant_crypto_extra_UUID.new(__com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(bytes)) end;
end
__com_hurlant_crypto_extra_UUID.prototype = _hx_a();
__com_hurlant_crypto_extra_UUID.prototype.bytes= nil;
__com_hurlant_crypto_extra_UUID.prototype.getBytes = function(self) 
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.cloneBytes(self.bytes) end
end
__com_hurlant_crypto_extra_UUID.prototype.getInts = function(self) 
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.toBytesArray(__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(self.bytes)) end
end
__com_hurlant_crypto_extra_UUID.prototype.getVariant = function(self) 
  local M = self.bytes.b[8];
  if (__com_hurlant_util_Bits.extract(M, 7, 1) == 0) then 
    do return __com_hurlant_crypto_extra_Variant.Reserved1 end;
  end;
  if (__com_hurlant_util_Bits.extract(M, 6, 1) == 0) then 
    do return __com_hurlant_crypto_extra_Variant.RFC4122 end;
  end;
  if (__com_hurlant_util_Bits.extract(M, 5, 1) == 0) then 
    do return __com_hurlant_crypto_extra_Variant.Microsoft end;
  end;
  do return __com_hurlant_crypto_extra_Variant.Reserved2 end
end
__com_hurlant_crypto_extra_UUID.prototype.getVersion = function(self) 
  local N = self.bytes.b[6];
  do return __com_hurlant_util_Bits.extract(N, 4, 4) end
end
__com_hurlant_crypto_extra_UUID.prototype.toString = function(self) 
  local hex = __com_hurlant_util_Hex.fromArray(__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(self.bytes));
  local pos = 0;
  local len = 8;
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(hex)))) then 
    len = __lua_lib_luautf8_Utf8.len(hex);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(hex) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(hex) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  local tmp = Std.string(__lua_lib_luautf8_Utf8.sub(hex, pos + 1, pos + len)) .. Std.string("-");
  local pos1 = 8;
  local len1 = 4;
  if ((len1 == nil) or (len1 > (pos1 + __lua_lib_luautf8_Utf8.len(hex)))) then 
    len1 = __lua_lib_luautf8_Utf8.len(hex);
  else
    if (len1 < 0) then 
      len1 = __lua_lib_luautf8_Utf8.len(hex) + len1;
    end;
  end;
  if (pos1 < 0) then 
    pos1 = __lua_lib_luautf8_Utf8.len(hex) + pos1;
  end;
  if (pos1 < 0) then 
    pos1 = 0;
  end;
  local tmp1 = Std.string(Std.string(tmp) .. Std.string(__lua_lib_luautf8_Utf8.sub(hex, pos1 + 1, pos1 + len1))) .. Std.string("-");
  local pos2 = 12;
  local len2 = 4;
  if ((len2 == nil) or (len2 > (pos2 + __lua_lib_luautf8_Utf8.len(hex)))) then 
    len2 = __lua_lib_luautf8_Utf8.len(hex);
  else
    if (len2 < 0) then 
      len2 = __lua_lib_luautf8_Utf8.len(hex) + len2;
    end;
  end;
  if (pos2 < 0) then 
    pos2 = __lua_lib_luautf8_Utf8.len(hex) + pos2;
  end;
  if (pos2 < 0) then 
    pos2 = 0;
  end;
  local tmp2 = Std.string(Std.string(tmp1) .. Std.string(__lua_lib_luautf8_Utf8.sub(hex, pos2 + 1, pos2 + len2))) .. Std.string("-");
  local pos3 = 16;
  local len3 = 4;
  if ((len3 == nil) or (len3 > (pos3 + __lua_lib_luautf8_Utf8.len(hex)))) then 
    len3 = __lua_lib_luautf8_Utf8.len(hex);
  else
    if (len3 < 0) then 
      len3 = __lua_lib_luautf8_Utf8.len(hex) + len3;
    end;
  end;
  if (pos3 < 0) then 
    pos3 = __lua_lib_luautf8_Utf8.len(hex) + pos3;
  end;
  if (pos3 < 0) then 
    pos3 = 0;
  end;
  local tmp3 = Std.string(Std.string(tmp2) .. Std.string(__lua_lib_luautf8_Utf8.sub(hex, pos3 + 1, pos3 + len3))) .. Std.string("-");
  local pos4 = 20;
  local len4 = nil;
  if ((len4 == nil) or (len4 > (pos4 + __lua_lib_luautf8_Utf8.len(hex)))) then 
    len4 = __lua_lib_luautf8_Utf8.len(hex);
  else
    if (len4 < 0) then 
      len4 = __lua_lib_luautf8_Utf8.len(hex) + len4;
    end;
  end;
  if (pos4 < 0) then 
    pos4 = __lua_lib_luautf8_Utf8.len(hex) + pos4;
  end;
  if (pos4 < 0) then 
    pos4 = 0;
  end;
  do return Std.string(tmp3) .. Std.string(__lua_lib_luautf8_Utf8.sub(hex, pos4 + 1, pos4 + len4)) end
end

__com_hurlant_crypto_extra_UUID.prototype.__class__ =  __com_hurlant_crypto_extra_UUID
_hxClasses["com.hurlant.crypto.extra.Variant"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Reserved1","RFC4122","Microsoft","Reserved2"},4)}
__com_hurlant_crypto_extra_Variant = _hxClasses["com.hurlant.crypto.extra.Variant"];
__com_hurlant_crypto_extra_Variant.Reserved1 = _hx_tab_array({[0]="Reserved1",0,__enum__ = __com_hurlant_crypto_extra_Variant},2)

__com_hurlant_crypto_extra_Variant.RFC4122 = _hx_tab_array({[0]="RFC4122",1,__enum__ = __com_hurlant_crypto_extra_Variant},2)

__com_hurlant_crypto_extra_Variant.Microsoft = _hx_tab_array({[0]="Microsoft",2,__enum__ = __com_hurlant_crypto_extra_Variant},2)

__com_hurlant_crypto_extra_Variant.Reserved2 = _hx_tab_array({[0]="Reserved2",3,__enum__ = __com_hurlant_crypto_extra_Variant},2)


__com_hurlant_crypto_symmetric_ICipher.new = {}
__com_hurlant_crypto_symmetric_ICipher.__name__ = true
__com_hurlant_crypto_symmetric_ICipher.prototype = _hx_a();
__com_hurlant_crypto_symmetric_ICipher.prototype.getBlockSize= nil;
__com_hurlant_crypto_symmetric_ICipher.prototype.encrypt= nil;
__com_hurlant_crypto_symmetric_ICipher.prototype.decrypt= nil;
__com_hurlant_crypto_symmetric_ICipher.prototype.dispose= nil;
__com_hurlant_crypto_symmetric_ICipher.prototype.toString= nil;

__com_hurlant_crypto_symmetric_ICipher.prototype.__class__ =  __com_hurlant_crypto_symmetric_ICipher

__com_hurlant_crypto_symmetric_IStreamCipher.new = {}
__com_hurlant_crypto_symmetric_IStreamCipher.__name__ = true
__com_hurlant_crypto_symmetric_IStreamCipher.__interfaces__ = {__com_hurlant_crypto_symmetric_ICipher}

__com_hurlant_crypto_prng_IPRNG.new = {}
__com_hurlant_crypto_prng_IPRNG.__name__ = true
__com_hurlant_crypto_prng_IPRNG.prototype = _hx_a();
__com_hurlant_crypto_prng_IPRNG.prototype.getPoolSize= nil;
__com_hurlant_crypto_prng_IPRNG.prototype.init= nil;
__com_hurlant_crypto_prng_IPRNG.prototype.next= nil;
__com_hurlant_crypto_prng_IPRNG.prototype.dispose= nil;
__com_hurlant_crypto_prng_IPRNG.prototype.toString= nil;

__com_hurlant_crypto_prng_IPRNG.prototype.__class__ =  __com_hurlant_crypto_prng_IPRNG

__com_hurlant_crypto_prng_ARC4.new = function(key) 
  local self = _hx_new(__com_hurlant_crypto_prng_ARC4.prototype)
  __com_hurlant_crypto_prng_ARC4.super(self,key)
  return self
end
__com_hurlant_crypto_prng_ARC4.super = function(self,key) 
  self.j = 0;
  self.i = 0;
  self.S = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  if (key ~= nil) then 
    self:init(key);
  end;
end
__com_hurlant_crypto_prng_ARC4.__name__ = true
__com_hurlant_crypto_prng_ARC4.__interfaces__ = {__com_hurlant_crypto_symmetric_IStreamCipher,__com_hurlant_crypto_prng_IPRNG}
__com_hurlant_crypto_prng_ARC4.prototype = _hx_a();
__com_hurlant_crypto_prng_ARC4.prototype.i= nil;
__com_hurlant_crypto_prng_ARC4.prototype.j= nil;
__com_hurlant_crypto_prng_ARC4.prototype.S= nil;
__com_hurlant_crypto_prng_ARC4.prototype.getPoolSize = function(self) 
  do return 256 end
end
__com_hurlant_crypto_prng_ARC4.prototype.init = function(self,key) 
  local _g = 0;
  while (_g < 256) do 
    _g = _g + 1;
    local i = _g - 1;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(self.S, i, i);
  end;
  local j = 0;
  local _g1 = 0;
  while (_g1 < 256) do 
    _g1 = _g1 + 1;
    local i1 = _g1 - 1;
    j = _hx_bit.band(__haxe__Int32_Int32_Impl_.clamp(__haxe__Int32_Int32_Impl_.clamp(j + __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, i1)) + __com_hurlant_util__ByteArray_ByteArray_Impl_.get(key, _G.math.fmod(i1, __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(key)))),255);
    local t = __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, i1);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(self.S, i1, __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, j));
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(self.S, j, t);
  end;
  self.i = 0;
  self.j = 0;
end
__com_hurlant_crypto_prng_ARC4.prototype.next = function(self) 
  self.i = _hx_bit.band(__haxe__Int32_Int32_Impl_.clamp(self.i + 1),255);
  self.j = _hx_bit.band(__haxe__Int32_Int32_Impl_.clamp(self.j + __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, self.i)),255);
  local t = __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, self.i);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(self.S, self.i, __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, self.j));
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(self.S, self.j, t);
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, _hx_bit.band(__haxe__Int32_Int32_Impl_.clamp(t + __com_hurlant_util__ByteArray_ByteArray_Impl_.get(self.S, self.i)),255)) end
end
__com_hurlant_crypto_prng_ARC4.prototype.getBlockSize = function(self) 
  do return 1 end
end
__com_hurlant_crypto_prng_ARC4.prototype.encrypt = function(self,block) 
  local i = 0;
  while (i < __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(block)) do 
    i = i + 1;
    local ret = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    local _g = ret;
    local _g1 = block;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(_g1, _g, __haxe__Int32_Int32_Impl_.xor(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(_g1, _g), self:next()));
  end;
end
__com_hurlant_crypto_prng_ARC4.prototype.decrypt = function(self,block) 
  self:encrypt(block);
end
__com_hurlant_crypto_prng_ARC4.prototype.dispose = function(self) 
  local i = 0;
  if (self.S ~= nil) then 
    local _g = 0;
    local _g1 = __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(self.S);
    while (_g < _g1) do 
      _g = _g + 1;
      local i1 = _g - 1;
      __com_hurlant_util__ByteArray_ByteArray_Impl_.set(self.S, i1, Std.random(256));
    end;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set_length(self.S, 0);
    self.S = nil;
  end;
  self.i = 0;
  self.j = 0;
  __com_hurlant_util_Memory.gc();
end
__com_hurlant_crypto_prng_ARC4.prototype.toString = function(self) 
  do return "rc4" end
end

__com_hurlant_crypto_prng_ARC4.prototype.__class__ =  __com_hurlant_crypto_prng_ARC4

__com_hurlant_crypto_prng_IRandom.new = {}
__com_hurlant_crypto_prng_IRandom.__name__ = true
__com_hurlant_crypto_prng_IRandom.prototype = _hx_a();
__com_hurlant_crypto_prng_IRandom.prototype.getRandomBytes= nil;

__com_hurlant_crypto_prng_IRandom.prototype.__class__ =  __com_hurlant_crypto_prng_IRandom

__com_hurlant_crypto_prng_Random.new = function(prng) 
  local self = _hx_new(__com_hurlant_crypto_prng_Random.prototype)
  __com_hurlant_crypto_prng_Random.super(self,prng)
  return self
end
__com_hurlant_crypto_prng_Random.super = function(self,prng) 
  self.seeded = false;
  self.ready = false;
  if (prng == nil) then 
    prng = function() 
      do return __com_hurlant_crypto_prng_ARC4.new() end;
    end;
  end;
  self.state = prng();
  self.psize = self.state:getPoolSize();
  self.pool = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  self.pptr = 0;
  while (self.pptr < self.psize) do 
    local t = Std.random(65536);
    local tmp = self.pool;
    local ret = (function() 
    local _hx_obj = self;
    local _hx_fld = 'pptr';
    local _ = _hx_obj[_hx_fld];
    _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
     return _;
     end)();
    self.pptr = __haxe__Int32_Int32_Impl_.clamp(self.pptr);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(tmp, ret, _hx_bit.band(_hx_bit.rshift(t,8),255));
    local tmp1 = self.pool;
    local ret1 = (function() 
    local _hx_obj = self;
    local _hx_fld = 'pptr';
    local _ = _hx_obj[_hx_fld];
    _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
     return _;
     end)();
    self.pptr = __haxe__Int32_Int32_Impl_.clamp(self.pptr);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(tmp1, ret1, _hx_bit.band(_hx_bit.rshift(t,0),255));
  end;
  self.pptr = 0;
  self:seed();
end
__com_hurlant_crypto_prng_Random.__name__ = true
__com_hurlant_crypto_prng_Random.__interfaces__ = {__com_hurlant_crypto_prng_IRandom}
__com_hurlant_crypto_prng_Random.getStaticRandomBytes = function(length,prng) 
  do return __com_hurlant_crypto_prng_Random.new(prng):getRandomBytes(length) end;
end
__com_hurlant_crypto_prng_Random.prototype = _hx_a();
__com_hurlant_crypto_prng_Random.prototype.state= nil;
__com_hurlant_crypto_prng_Random.prototype.ready= nil;
__com_hurlant_crypto_prng_Random.prototype.pool= nil;
__com_hurlant_crypto_prng_Random.prototype.psize= nil;
__com_hurlant_crypto_prng_Random.prototype.pptr= nil;
__com_hurlant_crypto_prng_Random.prototype.seeded= nil;
__com_hurlant_crypto_prng_Random.prototype.seed = function(self,x) 
  if (x == nil) then 
    x = 0;
  end;
  if (x == 0) then 
    local t = _G.os.time() * 1000;
    local d = _hx_e();
    _G.setmetatable(d, _hx_o({__fields__={__index=true},__index=Date.prototype}));
    d.t = t / 1000;
    d.d = _G.os.date("*t", Std.int(d.t));
    x = Std.int(d:getTime());
  end;
  local ret = (function() 
  local _hx_obj = self;
  local _hx_fld = 'pptr';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  self.pptr = __haxe__Int32_Int32_Impl_.clamp(self.pptr);
  local _g = ret;
  local _g1 = self.pool;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(_g1, _g, __haxe__Int32_Int32_Impl_.xor(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(_g1, _g), _hx_bit.band(__haxe__Int32_Int32_Impl_.shr(x, 0),255)));
  local ret1 = (function() 
  local _hx_obj = self;
  local _hx_fld = 'pptr';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  self.pptr = __haxe__Int32_Int32_Impl_.clamp(self.pptr);
  local _g2 = ret1;
  local _g11 = self.pool;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(_g11, _g2, __haxe__Int32_Int32_Impl_.xor(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(_g11, _g2), _hx_bit.band(__haxe__Int32_Int32_Impl_.shr(x, 8),255)));
  local ret2 = (function() 
  local _hx_obj = self;
  local _hx_fld = 'pptr';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  self.pptr = __haxe__Int32_Int32_Impl_.clamp(self.pptr);
  local _g3 = ret2;
  local _g12 = self.pool;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(_g12, _g3, __haxe__Int32_Int32_Impl_.xor(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(_g12, _g3), _hx_bit.band(__haxe__Int32_Int32_Impl_.shr(x, 16),255)));
  local ret3 = (function() 
  local _hx_obj = self;
  local _hx_fld = 'pptr';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)();
  self.pptr = __haxe__Int32_Int32_Impl_.clamp(self.pptr);
  local _g4 = ret3;
  local _g13 = self.pool;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set(_g13, _g4, __haxe__Int32_Int32_Impl_.xor(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(_g13, _g4), _hx_bit.band(__haxe__Int32_Int32_Impl_.shr(x, 24),255)));
  self.pptr = _G.math.fmod(self.pptr, self.psize);
  self.seeded = true;
end
__com_hurlant_crypto_prng_Random.prototype.autoSeed = function(self) 
  local data = __com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(__com_hurlant_crypto_prng_SecureRandom.getSecureRandomBytes(512));
  while (__com_hurlant_util__ByteArray_ByteArray_Impl_.get_bytesAvailable(data) >= 4) do 
    self:seed(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedInt(data));
  end;
end
__com_hurlant_crypto_prng_Random.prototype.nextBytes = function(self,buffer,length) 
  while (true) do 
    length = length - 1;
    local ret = length + 1;
    length = __haxe__Int32_Int32_Impl_.clamp(length);
    if (not (ret > 0)) then 
      break;
    end;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(buffer, self:nextByte());
  end;
end
__com_hurlant_crypto_prng_Random.prototype.getRandomBytes = function(self,length) 
  local buffer = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  while (true) do 
    length = length - 1;
    local ret = length + 1;
    length = __haxe__Int32_Int32_Impl_.clamp(length);
    if (not (ret > 0)) then 
      break;
    end;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(buffer, self:nextByte());
  end;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(buffer, 0);
  do return buffer end
end
__com_hurlant_crypto_prng_Random.prototype.nextByte = function(self) 
  if (not self.ready) then 
    if (not self.seeded) then 
      self:autoSeed();
    end;
    self.state:init(self.pool);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set_length(self.pool, 0);
    self.pptr = 0;
    self.ready = true;
  end;
  do return self.state:next() end
end
__com_hurlant_crypto_prng_Random.prototype.dispose = function(self) 
  __com_hurlant_util_ArrayUtil.secureDisposeByteArray(self.pool);
  self.pool = nil;
  self.state:dispose();
  self.state = nil;
  self.psize = 0;
  self.pptr = 0;
  __com_hurlant_util_Memory.gc();
end
__com_hurlant_crypto_prng_Random.prototype.toString = function(self) 
  do return Std.string("random-") .. Std.string(self.state:toString()) end
end

__com_hurlant_crypto_prng_Random.prototype.__class__ =  __com_hurlant_crypto_prng_Random

__com_hurlant_crypto_prng_SecureRandom.new = {}
__com_hurlant_crypto_prng_SecureRandom.__name__ = true
__com_hurlant_crypto_prng_SecureRandom.getSecureRandomBytes = function(length) 
  local reason = "";
  local _hx_status, _hx_result = pcall(function() 
  
      local out = __haxe_io_Bytes.alloc(length);
      local input = __sys_io_File.read("/dev/urandom");
      input:readBytes(out, 0, length);
      input.f:close();
      do return out end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
  
    local _hx_1 = _hx_result
    local e = _hx_1
    reason = Std.string("") .. Std.string(Std.string(e));
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  _G.error(Std.string("Can't find a secure source of random bytes. Reason: ") .. Std.string(reason),0);
end

__com_hurlant_util_ArrayUtil.new = {}
__com_hurlant_util_ArrayUtil.__name__ = true
__com_hurlant_util_ArrayUtil.equals = function(a1,a2) 
  if (__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(a1) ~= __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(a2)) then 
    do return false end;
  end;
  local _g = 0;
  local _g1 = __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(a1);
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (__com_hurlant_util__ByteArray_ByteArray_Impl_.get(a1, i) ~= __com_hurlant_util__ByteArray_ByteArray_Impl_.get(a2, i)) then 
      do return false end;
    end;
  end;
  do return true end;
end
__com_hurlant_util_ArrayUtil.secureDisposeIntArray = function(k) 
  if (k == nil) then 
    do return end;
  end;
  local r = __com_hurlant_crypto_prng_Random.new();
  local _g = 0;
  local _g1 = k.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    k[i] = r:nextByte();
  end;
end
__com_hurlant_util_ArrayUtil.secureDisposeByteArray = function(ba) 
  if (ba == nil) then 
    do return end;
  end;
  local _g = 0;
  local _g1 = __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(ba);
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(ba, i, Std.random(256));
  end;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_length(ba, 0);
end
__com_hurlant_util_ArrayUtil.xorByteArray = function(b1,b1start,b2,b2start,len) 
  local res = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_length(res, len);
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do 
    _g = _g + 1;
    local loop = _g - 1;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(res, loop, __haxe__Int32_Int32_Impl_.xor(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(b1, __haxe__Int32_Int32_Impl_.clamp(b1start + loop)), __com_hurlant_util__ByteArray_ByteArray_Impl_.get(b2, __haxe__Int32_Int32_Impl_.clamp(b2start + loop))));
  end;
  do return res end;
end

__com_hurlant_util_Base64.new = function() 
  local self = _hx_new(__com_hurlant_util_Base64.prototype)
  __com_hurlant_util_Base64.super(self)
  return self
end
__com_hurlant_util_Base64.super = function(self) 
end
__com_hurlant_util_Base64.__name__ = true
__com_hurlant_util_Base64.encode = function(data) 
  local bytes = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeUTFBytes(bytes, data);
  do return __com_hurlant_util_Base64.encodeByteArray(bytes) end;
end
__com_hurlant_util_Base64.decode = function(data) 
  local bytes = __com_hurlant_util_Base64.decodeToByteArray(data);
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.readUTFBytes(bytes, __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(bytes)) end;
end
__com_hurlant_util_Base64.encodeByteArray = function(data) 
  local out = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_length(out, Std.int(__haxe__Int32_Int32_Impl_.mul(__haxe__Int32_Int32_Impl_.clamp(__haxe__Int32_Int32_Impl_.clamp(2 + __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(data)) - (_G.math.fmod(__haxe__Int32_Int32_Impl_.clamp(__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(data) + 2), 3))), 4) / 3));
  local i = 0;
  local r = _G.math.fmod(__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(data), 3);
  local len = __haxe__Int32_Int32_Impl_.clamp(__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(data) - r);
  local c;
  local outPos = 0;
  while (i < len) do 
    i = i + 1;
    local ret = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    local c1 = __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(data, ret),16));
    i = i + 1;
    local ret1 = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    local c2 = __haxe__Int32_Int32_Impl_["or"](c1, __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(data, ret1),8)));
    i = i + 1;
    local ret2 = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    c = __haxe__Int32_Int32_Impl_["or"](c2, __com_hurlant_util__ByteArray_ByteArray_Impl_.get(data, ret2));
    outPos = outPos + 1;
    local ret3 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret3, __com_hurlant_util_Base64._encodeChars[_hx_bit.rshift(c,18)]);
    outPos = outPos + 1;
    local ret4 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret4, __com_hurlant_util_Base64._encodeChars[_hx_bit.band(_hx_bit.rshift(c,12),63)]);
    outPos = outPos + 1;
    local ret5 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret5, __com_hurlant_util_Base64._encodeChars[_hx_bit.band(_hx_bit.rshift(c,6),63)]);
    outPos = outPos + 1;
    local ret6 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret6, __com_hurlant_util_Base64._encodeChars[_hx_bit.band(c,63)]);
  end;
  if (r == 1) then 
    c = __com_hurlant_util__ByteArray_ByteArray_Impl_.get(data, i);
    outPos = outPos + 1;
    local ret7 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret7, __com_hurlant_util_Base64._encodeChars[_hx_bit.rshift(c,2)]);
    outPos = outPos + 1;
    local ret8 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret8, __com_hurlant_util_Base64._encodeChars[__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(c,3)),4))]);
    outPos = outPos + 1;
    local ret9 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret9, 61);
    outPos = outPos + 1;
    local ret10 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret10, 61);
  else
    if (r == 2) then 
      i = i + 1;
      local ret11 = i - 1;
      i = __haxe__Int32_Int32_Impl_.clamp(i);
      c = __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(data, ret11),8)), __com_hurlant_util__ByteArray_ByteArray_Impl_.get(data, i));
      outPos = outPos + 1;
      local ret12 = outPos - 1;
      outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
      __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret12, __com_hurlant_util_Base64._encodeChars[_hx_bit.rshift(c,10)]);
      outPos = outPos + 1;
      local ret13 = outPos - 1;
      outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
      __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret13, __com_hurlant_util_Base64._encodeChars[_hx_bit.band(_hx_bit.rshift(c,4),63)]);
      outPos = outPos + 1;
      local ret14 = outPos - 1;
      outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
      __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret14, __com_hurlant_util_Base64._encodeChars[__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(c,15)),2))]);
      outPos = outPos + 1;
      local ret15 = outPos - 1;
      outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
      __com_hurlant_util__ByteArray_ByteArray_Impl_.set(out, ret15, 61);
    end;
  end;
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.readUTFBytes(out, __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(out)) end;
end
__com_hurlant_util_Base64.decodeToByteArray = function(str) 
  local c1;
  local c2;
  local c3;
  local c4;
  local i = 0;
  local len = __lua_lib_luautf8_Utf8.len(str);
  local byteString = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeUTFBytes(byteString, str);
  local outPos = 0;
  while (i < len) do 
    local c11 = __com_hurlant_util_Base64._decodeChars;
    i = i + 1;
    local ret = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    c1 = c11[__com_hurlant_util__ByteArray_ByteArray_Impl_.get(byteString, ret)];
    if (c1 == -1) then 
      break;
    end;
    local c21 = __com_hurlant_util_Base64._decodeChars;
    i = i + 1;
    local ret1 = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    c2 = c21[__com_hurlant_util__ByteArray_ByteArray_Impl_.get(byteString, ret1)];
    if (c2 == -1) then 
      break;
    end;
    outPos = outPos + 1;
    local ret2 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(byteString, ret2, __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(c1,2)), __haxe__Int32_Int32_Impl_.shr(_hx_bit.band(c2,48), 4)));
    i = i + 1;
    local ret3 = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    c3 = __com_hurlant_util__ByteArray_ByteArray_Impl_.get(byteString, ret3);
    if (c3 == 61) then 
      break;
    end;
    c3 = __com_hurlant_util_Base64._decodeChars[c3];
    if (c3 == -1) then 
      break;
    end;
    outPos = outPos + 1;
    local ret4 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(byteString, ret4, __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(c2,15)),4)), __haxe__Int32_Int32_Impl_.shr(_hx_bit.band(c3,60), 2)));
    i = i + 1;
    local ret5 = i - 1;
    i = __haxe__Int32_Int32_Impl_.clamp(i);
    c4 = __com_hurlant_util__ByteArray_ByteArray_Impl_.get(byteString, ret5);
    if (c4 == 61) then 
      break;
    end;
    c4 = __com_hurlant_util_Base64._decodeChars[c4];
    if (c4 == -1) then 
      break;
    end;
    outPos = outPos + 1;
    local ret6 = outPos - 1;
    outPos = __haxe__Int32_Int32_Impl_.clamp(outPos);
    __com_hurlant_util__ByteArray_ByteArray_Impl_.set(byteString, ret6, __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(c3,3)),6)), c4));
  end;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_length(byteString, outPos);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(byteString, 0);
  do return byteString end;
end
__com_hurlant_util_Base64.decodeToByteArrayB = function(str) 
  do return __com_hurlant_util_Base64.decodeToByteArray(str) end;
end
__com_hurlant_util_Base64._initEncoreChar = function() 
  local encodeChars = Array.new();
  local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  local _g = 0;
  while (_g < 64) do 
    _g = _g + 1;
    local i = _g - 1;
    encodeChars[i] = __lua_lib_luautf8_Utf8.byte(chars, i + 1);
  end;
  do return encodeChars end;
end
__com_hurlant_util_Base64._initDecodeChar = function() 
  local decodeChars = _hx_tab_array({[0]=-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 256);
  do return decodeChars end;
end
__com_hurlant_util_Base64.prototype = _hx_a();

__com_hurlant_util_Base64.prototype.__class__ =  __com_hurlant_util_Base64

__com_hurlant_util_Bits.new = {}
__com_hurlant_util_Bits.__name__ = true
__com_hurlant_util_Bits.mask = function(count) 
  do return __haxe__Int32_Int32_Impl_.clamp(__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(1,count)) - 1) end;
end
__com_hurlant_util_Bits.extract = function(v,offset,count) 
  do return _hx_bit.band(_hx_bit.rshift(v,offset),__com_hurlant_util_Bits.mask(count)) end;
end
__com_hurlant_util_Bits.extractBit = function(v,offset) 
  do return (_hx_bit.band(_hx_bit.rshift(v,offset),1)) ~= 0 end;
end
__com_hurlant_util_Bits.clear = function(v,offset,count) 
  local a = __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(__com_hurlant_util_Bits.mask(count),offset));
  do return _hx_bit.band(v,_hx_bit_clamp(_hx_bit.bnot(a))) end;
end
__com_hurlant_util_Bits.insert = function(v,offset,count,value) 
  local mask = __com_hurlant_util_Bits.mask(count);
  v = _hx_bit.band(v,__com_hurlant_util_Bits.clear(v, offset, count));
  v = __haxe__Int32_Int32_Impl_["or"](v, __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(value,mask)),offset)));
  do return v end;
end

__com_hurlant_util__ByteArray_ByteArray_Impl_.new = {}
__com_hurlant_util__ByteArray_ByteArray_Impl_.__name__ = true
__com_hurlant_util__ByteArray_ByteArray_Impl_._new = function() 
  local this1 = __com_hurlant_util_ByteArrayData.new();
  do return this1 end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes = function(bytes) 
  local out = __com_hurlant_util_ByteArrayData.new(__haxe_io_Bytes.alloc(bytes.length));
  out._data:blit(0, bytes, 0, bytes.length);
  do return out end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytesArray = function(bytes) 
  local out = __com_hurlant_util_ByteArrayData.new(__haxe_io_Bytes.alloc(bytes.length));
  local data = out._data;
  local _g = 0;
  local _g1 = bytes.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    data.b[n] = _hx_bit.band(bytes[n],255);
  end;
  do return out end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.fromInt32ArrayBE = function(ints) 
  local out = __com_hurlant_util_ByteArrayData.new(__haxe_io_Bytes.alloc(ints.length * 4));
  out.endian = __com_hurlant_util_Endian.BIG_ENDIAN;
  local _g = 0;
  while (_g < ints.length) do 
    local i = ints[_g];
    _g = _g + 1;
    out:writeUnsignedInt(i);
  end;
  do return out end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.fromInt32ArrayLE = function(ints) 
  local out = __com_hurlant_util_ByteArrayData.new(__haxe_io_Bytes.alloc(ints.length * 4));
  out.endian = __com_hurlant_util_Endian.LITTLE_ENDIAN;
  local _g = 0;
  while (_g < ints.length) do 
    local i = ints[_g];
    _g = _g + 1;
    out:writeUnsignedInt(i);
  end;
  do return out end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.cloneBytes = function(v,offset,length) 
  if (length == nil) then 
    length = -1;
  end;
  if (offset == nil) then 
    offset = 0;
  end;
  if (length < 0) then 
    length = v.length;
  end;
  local out = __haxe_io_Bytes.alloc(length);
  out:blit(0, v, offset, length);
  do return out end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes = function(this1) 
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.cloneBytes(this1:getBytes(), 0, this1:get_length()) end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.toBytesArray = function(this1) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(this1);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local n = _g1 - 1;
    _g:push(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(this1, n));
  end;
  do return _g end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.toInt32ArrayLE = function(this1) 
  local t = __com_hurlant_util__ByteArray_ByteArray_Impl_.clone(this1);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_endian(t, __com_hurlant_util_Endian.LITTLE_ENDIAN);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(t, 0);
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = Std.int(__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(this1) / 4);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local n = _g1 - 1;
    _g:push(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedInt(this1));
  end;
  do return _g end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.toInt32ArrayBE = function(this1) 
  local t = __com_hurlant_util__ByteArray_ByteArray_Impl_.clone(this1);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_endian(t, __com_hurlant_util_Endian.BIG_ENDIAN);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(t, 0);
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = Std.int(__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(this1) / 4);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local n = _g1 - 1;
    _g:push(__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedInt(this1));
  end;
  do return _g end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readBoolean = function(this1) 
  do return this1:readUnsignedByte() ~= 0 end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readByte = function(this1) 
  do return this1:readByte() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedByte = function(this1) 
  do return this1:readUnsignedByte() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readShort = function(this1) 
  do return this1:readShort() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedShort = function(this1) 
  do return this1:readUnsignedShort() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readUnsignedInt = function(this1) 
  do return this1:readUnsignedInt() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readBytes = function(this1,output,offset,length) 
  this1:readBytes(output, offset, length);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readBytes2 = function(this1,length) 
  do return this1:readBytes2(length) end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readMultiByte = function(this1,length,encoding) 
  do return this1:readMultiByte(length, encoding) end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.readUTFBytes = function(this1,length) 
  do return this1:readUTFBytes(length) end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte = function(this1,value) 
  this1:writeByte(value);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeUnsignedByte = function(this1,value) 
  this1:writeUnsignedByte(value);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeShort = function(this1,value) 
  this1:writeShort(value);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeInt24 = function(this1,value) 
  this1:writeInt24(value);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeUnsignedInt = function(this1,value) 
  this1:writeUnsignedInt(value);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeBytes = function(this1,input,offset,length) 
  if (length == nil) then 
    length = 0;
  end;
  if (offset == nil) then 
    offset = 0;
  end;
  this1:writeBytes(input, offset, length);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeBytes2 = function(this1,input) 
  this1:writeBytes2(input);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeMultiByte = function(this1,str,encoding) 
  this1:writeMultiByte(str, encoding);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeUTFBytes = function(this1,str) 
  this1:writeUTFBytes(str);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.writeUTF = function(this1,str) 
  this1:writeUTF(str);
  do return end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.get_endian = function(this1) 
  do return this1.endian end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.get_position = function(this1) 
  do return this1:get_position() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length = function(this1) 
  do return this1:get_length() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.get_bytesAvailable = function(this1) 
  do return this1:get_bytesAvailable() end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.set_endian = function(this1,value) 
  this1.endian = value do return this1.endian end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.set_position = function(this1,value) 
  do return this1:set_position(value) end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.set_length = function(this1,value) 
  do return this1:set_length(value) end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.clone = function(this1) 
  local out = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeBytes(out, this1);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(out, 0);
  do return out end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.get = function(this1,index) 
  do return this1:get(index) end;
end
__com_hurlant_util__ByteArray_ByteArray_Impl_.set = function(this1,index,value) 
  do return this1:set(index, value) end;
end

__com_hurlant_util_IDataInput.new = {}
__com_hurlant_util_IDataInput.__name__ = true

__com_hurlant_util_IDataOutput.new = {}
__com_hurlant_util_IDataOutput.__name__ = true
__com_hurlant_util_IDataOutput.prototype = _hx_a();
__com_hurlant_util_IDataOutput.prototype.writeByte= nil;
__com_hurlant_util_IDataOutput.prototype.writeShort= nil;

__com_hurlant_util_IDataOutput.prototype.__class__ =  __com_hurlant_util_IDataOutput

__com_hurlant_util_ByteArrayData.new = function(_data,_position,_length) 
  local self = _hx_new(__com_hurlant_util_ByteArrayData.prototype)
  __com_hurlant_util_ByteArrayData.super(self,_data,_position,_length)
  return self
end
__com_hurlant_util_ByteArrayData.super = function(self,_data,_position,_length) 
  if (_length == nil) then 
    _length = -1;
  end;
  if (_position == nil) then 
    _position = 0;
  end;
  self._position = 0;
  self._length = 0;
  self._data = nil;
  self.endian = __com_hurlant_util_Endian.BIG_ENDIAN;
  if (_length < 0) then 
    _length = (function() 
      local _hx_1
      if (_data ~= nil) then 
      _hx_1 = _data.length; else 
      _hx_1 = 0; end
      return _hx_1
    end )();
  end;
  self._data = (function() 
    local _hx_2
    if (_data ~= nil) then 
    _hx_2 = _data; else 
    _hx_2 = __haxe_io_Bytes.alloc(16); end
    return _hx_2
  end )();
  self._position = _position;
  self._length = _length;
end
__com_hurlant_util_ByteArrayData.__name__ = true
__com_hurlant_util_ByteArrayData.__interfaces__ = {__com_hurlant_util_IDataInput,__com_hurlant_util_IDataOutput}
__com_hurlant_util_ByteArrayData.prototype = _hx_a();
__com_hurlant_util_ByteArrayData.prototype.endian= nil;
__com_hurlant_util_ByteArrayData.prototype._data= nil;
__com_hurlant_util_ByteArrayData.prototype._length= nil;
__com_hurlant_util_ByteArrayData.prototype._position= nil;
__com_hurlant_util_ByteArrayData.prototype.ensureLength = function(self,elength) 
  local oldLength = self._length;
  self._length = Std.int(Math.max(self._length, elength));
  if (self._data.length < self._length) then 
    local newData = __haxe_io_Bytes.alloc(Std.int(Math.max(self._data.length * 2, self._length)));
    local oldData = self._data;
    newData:blit(0, oldData, 0, oldLength);
    self._data = newData;
  end;
end
__com_hurlant_util_ByteArrayData.prototype.readBytes = function(self,output,offset,length) 
  if (length == 0) then 
    length = self:get_bytesAvailable();
  end;
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(output, offset);
  local _g = 0;
  local _g1 = length;
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    __com_hurlant_util__ByteArray_ByteArray_Impl_.writeByte(output, self:readUnsignedByte());
  end;
end
__com_hurlant_util_ByteArrayData.prototype.readBytes2 = function(self,length) 
  local out = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  self:readBytes(out, 0, length);
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.getBytes(out) end
end
__com_hurlant_util_ByteArrayData.prototype.readUTFBytes = function(self,length) 
  do return self:readMultiByte(length, "utf-8") end
end
__com_hurlant_util_ByteArrayData.prototype.readMultiByte = function(self,length,encoding) 
  do return __com_hurlant_crypto_encoding_Charsets.fromString(encoding):decode(self:readBytes2(length)) end
end
__com_hurlant_util_ByteArrayData.prototype.readByte = function(self) 
  do return __com_hurlant_util_Std2.sx8(self:readUnsignedByte()) end
end
__com_hurlant_util_ByteArrayData.prototype.readShort = function(self) 
  do return __com_hurlant_util_Std2.sx16(self:readUnsignedShort()) end
end
__com_hurlant_util_ByteArrayData.prototype.readUnsignedByte = function(self) 
  self:ensureWrite(1);
  local result = _hx_bit.band(self:get(self._position),255);
  self._position = __haxe__Int32_Int32_Impl_.clamp(self._position + 1);
  do return result end
end
__com_hurlant_util_ByteArrayData.prototype.readUnsignedShort = function(self) 
  self:ensureWrite(2);
  local _this = self._data;
  local pos = self:get_position();
  local result = self:bswap16Endian(_hx_bit.bor(_this.b[pos],_hx_bit.lshift(_this.b[pos + 1],8)));
  self._position = __haxe__Int32_Int32_Impl_.clamp(self._position + 2);
  do return result end
end
__com_hurlant_util_ByteArrayData.prototype.readUnsignedInt = function(self) 
  self:ensureWrite(4);
  local _this = self._data;
  local pos = self:get_position();
  local v = _hx_bit.bor(_hx_bit.bor(_hx_bit.bor(_this.b[pos],_hx_bit.lshift(_this.b[pos + 1],8)),_hx_bit.lshift(_this.b[pos + 2],16)),_hx_bit.lshift(_this.b[pos + 3],24));
  local result = self:bswap32Endian(_hx_bit_clamp((function() 
    local _hx_1
    if ((_hx_bit.band(v,-2147483648)) ~= 0) then 
    _hx_1 = _hx_bit.bor(v,-2147483648); else 
    _hx_1 = v; end
    return _hx_1
  end )()));
  self._position = __haxe__Int32_Int32_Impl_.clamp(self._position + 4);
  do return result end
end
__com_hurlant_util_ByteArrayData.prototype.set = function(self,index,value) 
  self:ensureLength(__haxe__Int32_Int32_Impl_.clamp(index + 1));
  self._data.b[index] = _hx_bit.band(value,255);
  do return value end
end
__com_hurlant_util_ByteArrayData.prototype.get = function(self,index) 
  self:ensureLength(__haxe__Int32_Int32_Impl_.clamp(index + 1));
  do return _hx_bit.band(self._data.b[index],255) end
end
__com_hurlant_util_ByteArrayData.prototype.writeUTF = function(self,str) 
  self:writeUnsignedShort(__lua_lib_luautf8_Utf8.len(str));
  self:writeUTFBytes(str);
end
__com_hurlant_util_ByteArrayData.prototype.writeUTFBytes = function(self,str) 
  self:writeMultiByte(str, "utf-8");
  do return end
end
__com_hurlant_util_ByteArrayData.prototype.writeMultiByte = function(self,str,encoding) 
  self:writeBytes(__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(__com_hurlant_crypto_encoding_Charsets.fromString(encoding):encode(str)));
end
__com_hurlant_util_ByteArrayData.prototype.writeByte = function(self,value) 
  self:writeUnsignedByte(value);
end
__com_hurlant_util_ByteArrayData.prototype.writeShort = function(self,value) 
  self:writeUnsignedShort(value);
end
__com_hurlant_util_ByteArrayData.prototype.writeInt24 = function(self,value) 
  self:writeUnsignedInt24(value);
end
__com_hurlant_util_ByteArrayData.prototype.writeBytes = function(self,input,offset,length) 
  if (length == nil) then 
    length = 0;
  end;
  if (offset == nil) then 
    offset = 0;
  end;
  if (length == 0) then 
    length = __haxe__Int32_Int32_Impl_.clamp(__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(input) - offset);
  end;
  local _g = 0;
  local _g1 = length;
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    self:writeByte(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(input, __haxe__Int32_Int32_Impl_.clamp(offset + n)));
  end;
end
__com_hurlant_util_ByteArrayData.prototype.writeBytes2 = function(self,input) 
  self:writeBytes(__com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(input));
end
__com_hurlant_util_ByteArrayData.prototype.writeUnsignedByte = function(self,value) 
  self:ensureWrite(1);
  self._data.b[self._position] = _hx_bit.band(value,255);
  self._position = __haxe__Int32_Int32_Impl_.clamp(self._position + 1);
end
__com_hurlant_util_ByteArrayData.prototype.writeUnsignedShort = function(self,value) 
  self:ensureWrite(2);
  local _this = self._data;
  local pos = self._position;
  local v = self:bswap16Endian(value);
  _this.b[pos] = _hx_bit.band(v,255);
  _this.b[pos + 1] = _hx_bit.band(_hx_bit.arshift(v,8),255);
  self._position = __haxe__Int32_Int32_Impl_.clamp(self._position + 2);
end
__com_hurlant_util_ByteArrayData.prototype.writeUnsignedInt24 = function(self,value) 
  local v2 = self:bswap24Endian(value);
  self:writeByte(_hx_bit.band(_hx_bit.rshift(v2,0),255));
  self:writeByte(_hx_bit.band(_hx_bit.rshift(v2,8),255));
  self:writeByte(_hx_bit.band(_hx_bit.rshift(v2,16),255));
end
__com_hurlant_util_ByteArrayData.prototype.writeUnsignedInt = function(self,value) 
  self:ensureWrite(4);
  local _this = self._data;
  local pos = self._position;
  local v = self:bswap32Endian(value);
  _this.b[pos] = _hx_bit.band(v,255);
  _this.b[pos + 1] = _hx_bit.band(_hx_bit.arshift(v,8),255);
  _this.b[pos + 2] = _hx_bit.band(_hx_bit.arshift(v,16),255);
  _this.b[pos + 3] = _hx_bit.band(_hx_bit.rshift(v,24),255);
  self._position = __haxe__Int32_Int32_Impl_.clamp(self._position + 4);
end
__com_hurlant_util_ByteArrayData.prototype.get_position = function(self) 
  do return self._position end
end
__com_hurlant_util_ByteArrayData.prototype.get_length = function(self) 
  do return self._length end
end
__com_hurlant_util_ByteArrayData.prototype.set_position = function(self,value) 
  self._position = value do return self._position end
end
__com_hurlant_util_ByteArrayData.prototype.set_length = function(self,value) 
  self:ensureLength(value);
  if (self._position > value) then 
    self._position = value;
  end;
  self._length = value do return self._length end
end
__com_hurlant_util_ByteArrayData.prototype.get_bytesAvailable = function(self) 
  do return __haxe__Int32_Int32_Impl_.clamp(self:get_length() - self:get_position()) end
end
__com_hurlant_util_ByteArrayData.prototype.ensureWrite = function(self,count) 
  self:ensureLength(__haxe__Int32_Int32_Impl_.clamp(self._position + count));
end
__com_hurlant_util_ByteArrayData.prototype.bswap32Endian = function(self,value) 
  if (self.endian == __com_hurlant_util_Endian.BIG_ENDIAN) then 
    do return __com_hurlant_util_Std2.bswap32(value) end;
  else
    do return value end;
  end;
end
__com_hurlant_util_ByteArrayData.prototype.bswap24Endian = function(self,value) 
  if (self.endian == __com_hurlant_util_Endian.BIG_ENDIAN) then 
    do return __com_hurlant_util_Std2.bswap24(value) end;
  else
    do return value end;
  end;
end
__com_hurlant_util_ByteArrayData.prototype.bswap16Endian = function(self,value) 
  if (self.endian == __com_hurlant_util_Endian.BIG_ENDIAN) then 
    do return __com_hurlant_util_Std2.bswap16(value) end;
  else
    do return value end;
  end;
end
__com_hurlant_util_ByteArrayData.prototype.getBytes = function(self) 
  local out = __haxe_io_Bytes.alloc(self:get_length());
  out:blit(0, self._data, 0, self:get_length());
  do return out end
end

__com_hurlant_util_ByteArrayData.prototype.__class__ =  __com_hurlant_util_ByteArrayData

__com_hurlant_util_CType.new = {}
__com_hurlant_util_CType.__name__ = true
__com_hurlant_util_CType.getDigit = function(charCode) 
  if (__com_hurlant_util_CType.isDigit(charCode)) then 
    do return __haxe__Int32_Int32_Impl_.clamp(__haxe__Int32_Int32_Impl_.clamp(charCode - 48) + 0) end;
  end;
  if (__com_hurlant_util_CType.isLowerAlpha(charCode)) then 
    do return __haxe__Int32_Int32_Impl_.clamp(__haxe__Int32_Int32_Impl_.clamp(charCode - 97) + 10) end;
  end;
  if (__com_hurlant_util_CType.isUpperAlpha(charCode)) then 
    do return __haxe__Int32_Int32_Impl_.clamp(__haxe__Int32_Int32_Impl_.clamp(charCode - 65) + 10) end;
  end;
  do return -1 end;
end
__com_hurlant_util_CType.isDigit = function(charCode) 
  if (charCode >= 48) then 
    do return charCode <= 57 end;
  else
    do return false end;
  end;
end
__com_hurlant_util_CType.isAlpha = function(charCode) 
  if (not __com_hurlant_util_CType.isUpperAlpha(charCode)) then 
    do return __com_hurlant_util_CType.isLowerAlpha(charCode) end;
  else
    do return true end;
  end;
end
__com_hurlant_util_CType.isUpperAlpha = function(charCode) 
  if (charCode >= 65) then 
    do return charCode <= 90 end;
  else
    do return false end;
  end;
end
__com_hurlant_util_CType.isLowerAlpha = function(charCode) 
  if (charCode >= 97) then 
    do return charCode <= 122 end;
  else
    do return false end;
  end;
end

__com_hurlant_util_Error.new = function(msg) 
  local self = _hx_new(__com_hurlant_util_Error.prototype)
  __com_hurlant_util_Error.super(self,msg)
  return self
end
__com_hurlant_util_Error.super = function(self,msg) 
  self.msg = msg;
end
__com_hurlant_util_Error.__name__ = true
__com_hurlant_util_Error.prototype = _hx_a();
__com_hurlant_util_Error.prototype.msg= nil;
__com_hurlant_util_Error.prototype.toString = function(self) 
  do return self.msg end
end

__com_hurlant_util_Error.prototype.__class__ =  __com_hurlant_util_Error

__com_hurlant_util_Hex.new = {}
__com_hurlant_util_Hex.__name__ = true
__com_hurlant_util_Hex.toArray = function(hex) 
  hex = EReg.new("^0x|\\s|:", "gm"):replace(hex, "");
  if ((_hx_bit.band(__lua_lib_luautf8_Utf8.len(hex),1)) == 1) then 
    hex = Std.string("0") .. Std.string(hex);
  end;
  local a = __haxe_io_Bytes.alloc(Std.int(__lua_lib_luautf8_Utf8.len(hex) / 2));
  local _g = 0;
  local _g1 = a.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local pos = i * 2;
    local len = 2;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(hex)))) then 
      len = __lua_lib_luautf8_Utf8.len(hex);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(hex) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(hex) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    local v = __com_hurlant_util_Std2.parseInt(__lua_lib_luautf8_Utf8.sub(hex, pos + 1, pos + len), 16);
    a.b[i] = _hx_bit.band(v,255);
  end;
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.fromBytes(a) end;
end
__com_hurlant_util_Hex.fromArray = function(array,colons) 
  if (colons == nil) then 
    colons = false;
  end;
  local s = "";
  local _g = 0;
  local _g1 = __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(array);
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local _this = Std.string("0") .. Std.string(__com_hurlant_util_Std2.string(__com_hurlant_util__ByteArray_ByteArray_Impl_.get(array, i), 16));
    local pos = -2;
    local len = 2;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(_this)))) then 
      len = __lua_lib_luautf8_Utf8.len(_this);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(_this) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(_this) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    s = Std.string(s) .. Std.string(__lua_lib_luautf8_Utf8.sub(_this, pos + 1, pos + len));
    if (colons) then 
      if (i < __haxe__Int32_Int32_Impl_.clamp(__com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(array) - 1)) then 
        s = Std.string(s) .. Std.string(":");
      end;
    end;
  end;
  do return s end;
end
__com_hurlant_util_Hex.toString = function(hex,charSet) 
  if (charSet == nil) then 
    charSet = "utf-8";
  end;
  local a = __com_hurlant_util_Hex.toArray(hex);
  do return __com_hurlant_util__ByteArray_ByteArray_Impl_.readMultiByte(a, __com_hurlant_util__ByteArray_ByteArray_Impl_.get_length(a), charSet) end;
end
__com_hurlant_util_Hex.toRawString = function(hex) 
  do return _hx_wrap_if_string_field(__com_hurlant_util_Hex,'toString')(hex, "iso-8859-1") end;
end
__com_hurlant_util_Hex.fromString = function(str,colons,charSet) 
  if (charSet == nil) then 
    charSet = "utf-8";
  end;
  if (colons == nil) then 
    colons = false;
  end;
  local a = __com_hurlant_util__ByteArray_ByteArray_Impl_._new();
  __com_hurlant_util__ByteArray_ByteArray_Impl_.writeMultiByte(a, str, charSet);
  __com_hurlant_util__ByteArray_ByteArray_Impl_.set_position(a, 0);
  do return __com_hurlant_util_Hex.fromArray(a, colons) end;
end
__com_hurlant_util_Hex.fromRawString = function(str,colons) 
  if (colons == nil) then 
    colons = false;
  end;
  do return __com_hurlant_util_Hex.fromString(str, colons, "iso-8859-1") end;
end

__com_hurlant_util_Memory.new = {}
__com_hurlant_util_Memory.__name__ = true
__com_hurlant_util_Memory.gc = function() 
end
__com_hurlant_util_Memory.get_used = function() 
  do return 0 end;
end

__com_hurlant_util_Std2.new = {}
__com_hurlant_util_Std2.__name__ = true
__com_hurlant_util_Std2.modulo = function(x,y) 
  do return _G.math.fmod(((_G.math.fmod(x, y)) + y), y) end;
end
__com_hurlant_util_Std2.parseHex = function(value) 
  local out = 0;
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(value);
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    local c = __lua_lib_luautf8_Utf8.sub(value, n + 1, n + 1);
    local cc = __lua_lib_luautf8_Utf8.byte(value, n + 1);
    local digit = __com_hurlant_util_CType.getDigit(cc);
    if ((digit < 0) or (digit >= 16)) then 
      _G.error(__com_hurlant_util_Error.new(Std.string("Invalid digit ") .. Std.string(digit)),0);
    end;
    out = __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(out,4));
    out = __haxe__Int32_Int32_Impl_["or"](out, digit);
  end;
  do return out end;
end
__com_hurlant_util_Std2.parseInt = function(value,radix) 
  if (radix == nil) then 
    radix = 10;
  end;
  local pos = 0;
  local len = 1;
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(value)))) then 
    len = __lua_lib_luautf8_Utf8.len(value);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(value) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(value) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  if (__lua_lib_luautf8_Utf8.sub(value, pos + 1, pos + len) == "-") then 
    local pos1 = 1;
    local len1 = nil;
    if ((len1 == nil) or (len1 > (pos1 + __lua_lib_luautf8_Utf8.len(value)))) then 
      len1 = __lua_lib_luautf8_Utf8.len(value);
    else
      if (len1 < 0) then 
        len1 = __lua_lib_luautf8_Utf8.len(value) + len1;
      end;
    end;
    if (pos1 < 0) then 
      pos1 = __lua_lib_luautf8_Utf8.len(value) + pos1;
    end;
    if (pos1 < 0) then 
      pos1 = 0;
    end;
    do return -__com_hurlant_util_Std2.parseInt(__lua_lib_luautf8_Utf8.sub(value, pos1 + 1, pos1 + len1), radix) end;
  end;
  if (radix == 16) then 
    do return __com_hurlant_util_Std2.parseHex(value) end;
  end;
  local out = 0;
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(value);
  while (_g < _g1) do 
    _g = _g + 1;
    local n = _g - 1;
    local c = __lua_lib_luautf8_Utf8.sub(value, n + 1, n + 1);
    local cc = __lua_lib_luautf8_Utf8.byte(value, n + 1);
    local digit = __com_hurlant_util_CType.getDigit(cc);
    if ((digit < 0) or (digit >= radix)) then 
      _G.error(__com_hurlant_util_Error.new(Std.string("Invalid digit ") .. Std.string(digit)),0);
    end;
    out = __haxe__Int32_Int32_Impl_.mul(out, radix);
    out = __haxe__Int32_Int32_Impl_.clamp(out + digit);
  end;
  do return out end;
end
__com_hurlant_util_Std2.toStringHex = function(value) 
  if (value == 0) then 
    do return "0" end;
  end;
  local out = "";
  while (value ~= 0) do 
    local index = _hx_bit.band(value,15);
    local c = __lua_lib_luautf8_Utf8.sub(__com_hurlant_util_CType.DIGITS, index + 1, index + 1);
    out = Std.string(c) .. Std.string(out);
    value = _hx_bit.rshift(value,4);
  end;
  do return out end;
end
__com_hurlant_util_Std2.string = function(value,radix) 
  if (value < 0) then 
    do return Std.string("-") .. Std.string(__com_hurlant_util_Std2.string(-value, radix)) end;
  end;
  if (value == 0) then 
    do return "0" end;
  end;
  local out = "";
  while (value > 0) do 
    local index = _G.math.fmod(value, radix);
    local c = __lua_lib_luautf8_Utf8.sub(__com_hurlant_util_CType.DIGITS, index + 1, index + 1);
    out = Std.string(c) .. Std.string(out);
    value = Std.int(value / radix);
  end;
  do return out end;
end
__com_hurlant_util_Std2.min3 = function(a,b,c) 
  do return Math.min(Math.min(a, b), c) end;
end
__com_hurlant_util_Std2.bswap32 = function(a) 
  do return __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(a,255)),24)), __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(a,65280)),8))), _hx_bit.rshift((_hx_bit.band(a,16711680)),8)), _hx_bit.band(_hx_bit.rshift(a,24),255)) end;
end
__com_hurlant_util_Std2.bswap24 = function(a) 
  local v0 = _hx_bit.band(_hx_bit.rshift(a,0),255);
  local v1 = _hx_bit.band(_hx_bit.rshift(a,8),255);
  local v2 = _hx_bit.band(_hx_bit.rshift(a,16),255);
  do return __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(v2,0)), __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(v1,8))), __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(v0,16))) end;
end
__com_hurlant_util_Std2.bswap16 = function(value) 
  do return __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift((_hx_bit.band(value,255)),8)), _hx_bit.band(_hx_bit.rshift(value,8),255)) end;
end
__com_hurlant_util_Std2.rrol = function(num,cnt) 
  do return __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(num,__haxe__Int32_Int32_Impl_.clamp(32 - cnt))), _hx_bit.rshift(num,cnt)) end;
end
__com_hurlant_util_Std2.rol = function(num,cnt) 
  do return __haxe__Int32_Int32_Impl_["or"](__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(num,cnt)), _hx_bit.rshift(num,__haxe__Int32_Int32_Impl_.clamp(32 - cnt))) end;
end
__com_hurlant_util_Std2.cbit = function(x) 
  x = __haxe__Int32_Int32_Impl_.clamp(x - (_hx_bit.band(_hx_bit.rshift(x,1),1431655765)));
  x = __haxe__Int32_Int32_Impl_.clamp((_hx_bit.band(x,858993459)) + (_hx_bit.band(_hx_bit.rshift(x,2),858993459)));
  x = _hx_bit.band(__haxe__Int32_Int32_Impl_.clamp(x + (_hx_bit.rshift(x,4))),252645135);
  x = __haxe__Int32_Int32_Impl_.clamp(x + (_hx_bit.rshift(x,8)));
  x = __haxe__Int32_Int32_Impl_.clamp(x + (_hx_bit.rshift(x,16)));
  do return _hx_bit.band(x,63) end;
end
__com_hurlant_util_Std2.lbit = function(x) 
  if (x == 0) then 
    do return -1 end;
  end;
  local r = 0;
  if ((_hx_bit.band(x,65535)) == 0) then 
    x = __haxe__Int32_Int32_Impl_.shr(x, 16);
    r = r + 16;
  end;
  if ((_hx_bit.band(x,255)) == 0) then 
    x = __haxe__Int32_Int32_Impl_.shr(x, 8);
    r = r + 8;
  end;
  if ((_hx_bit.band(x,15)) == 0) then 
    x = __haxe__Int32_Int32_Impl_.shr(x, 4);
    r = r + 4;
  end;
  if ((_hx_bit.band(x,3)) == 0) then 
    x = __haxe__Int32_Int32_Impl_.shr(x, 2);
    r = r + 2;
  end;
  if ((_hx_bit.band(x,1)) == 0) then 
    x = __haxe__Int32_Int32_Impl_.shr(x, 0);
    r = r + 1;
  end;
  do return r end;
end
__com_hurlant_util_Std2.nbits = function(x) 
  local r = 1;
  local t = _hx_bit.rshift(x,16);
  if (t ~= 0) then 
    x = t;
    r = __haxe__Int32_Int32_Impl_.clamp(r + 16);
  end;
  t = __haxe__Int32_Int32_Impl_.shr(x, 8);
  if (t ~= 0) then 
    x = t;
    r = __haxe__Int32_Int32_Impl_.clamp(r + 8);
  end;
  t = __haxe__Int32_Int32_Impl_.shr(x, 4);
  if (t ~= 0) then 
    x = t;
    r = __haxe__Int32_Int32_Impl_.clamp(r + 4);
  end;
  t = __haxe__Int32_Int32_Impl_.shr(x, 2);
  if (t ~= 0) then 
    x = t;
    r = __haxe__Int32_Int32_Impl_.clamp(r + 2);
  end;
  t = __haxe__Int32_Int32_Impl_.shr(x, 1);
  if (t ~= 0) then 
    x = t;
    r = __haxe__Int32_Int32_Impl_.clamp(r + 1);
  end;
  do return r end;
end
__com_hurlant_util_Std2.op_and = function(x,y) 
  do return _hx_bit.band(x,y) end;
end
__com_hurlant_util_Std2.op_or = function(x,y) 
  do return __haxe__Int32_Int32_Impl_["or"](x, y) end;
end
__com_hurlant_util_Std2.op_xor = function(x,y) 
  do return __haxe__Int32_Int32_Impl_.xor(x, y) end;
end
__com_hurlant_util_Std2.op_andnot = function(x,y) 
  do return _hx_bit.band(x,_hx_bit_clamp(_hx_bit.bnot(y))) end;
end
__com_hurlant_util_Std2.sx8 = function(v) 
  do return __haxe__Int32_Int32_Impl_.shr(__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(v,24)), 24) end;
end
__com_hurlant_util_Std2.sx16 = function(v) 
  do return __haxe__Int32_Int32_Impl_.shr(__haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(v,16)), 16) end;
end
__com_hurlant_util_Std2.roundUp = function(numToRound,multiple) 
  local isPositive = (function() 
    local _hx_1
    if (numToRound >= 0) then 
    _hx_1 = 1; else 
    _hx_1 = 0; end
    return _hx_1
  end )();
  do return __haxe__Int32_Int32_Impl_.mul(Std.int(__haxe__Int32_Int32_Impl_.clamp(numToRound + __haxe__Int32_Int32_Impl_.mul(isPositive, __haxe__Int32_Int32_Impl_.clamp(multiple - 1))) / multiple), multiple) end;
end

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true
__haxe_IMap.prototype = _hx_a();
__haxe_IMap.prototype.get= nil;
__haxe_IMap.prototype.keys= nil;

__haxe_IMap.prototype.__class__ =  __haxe_IMap

__haxe__Int32_Int32_Impl_.new = {}
__haxe__Int32_Int32_Impl_.__name__ = true
__haxe__Int32_Int32_Impl_.mul = function(a,b) 
  do return __haxe__Int32_Int32_Impl_.clamp((a * (_hx_bit.band(b,65535))) + __haxe__Int32_Int32_Impl_.clamp(_hx_bit.lshift(a * (_hx_bit.rshift(b,16)),16))) end;
end
__haxe__Int32_Int32_Impl_["or"] = function(a,b) 
  do return __haxe__Int32_Int32_Impl_.clamp(_hx_bit.bor(a,b)) end;
end
__haxe__Int32_Int32_Impl_.xor = function(a,b) 
  do return __haxe__Int32_Int32_Impl_.clamp(_hx_bit.bxor(a,b)) end;
end
__haxe__Int32_Int32_Impl_.shr = function(a,b) 
  do return __haxe__Int32_Int32_Impl_.clamp(_hx_bit.arshift(a,b)) end;
end
__haxe__Int32_Int32_Impl_.clamp = function(x) 
  do return _hx_bit_clamp(x) end;
end

__haxe_Json.new = {}
__haxe_Json.__name__ = true
__haxe_Json.stringify = function(value,replacer,space) 
  do return __haxe_format_JsonPrinter.print(value, replacer, space) end;
end

__haxe_Log.new = {}
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if ((infos ~= nil) and (infos.customParams ~= nil)) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v1 = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v1))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_a();
__haxe_ds_StringMap.prototype.h= nil;
__haxe_ds_StringMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_format_JsonPrinter.new = function(replacer,space) 
  local self = _hx_new(__haxe_format_JsonPrinter.prototype)
  __haxe_format_JsonPrinter.super(self,replacer,space)
  return self
end
__haxe_format_JsonPrinter.super = function(self,replacer,space) 
  self.replacer = _hx_funcToField(replacer);
  self.indent = space;
  self.pretty = space ~= nil;
  self.nind = 0;
  self.buf = StringBuf.new();
end
__haxe_format_JsonPrinter.__name__ = true
__haxe_format_JsonPrinter.print = function(o,replacer,space) 
  local printer = __haxe_format_JsonPrinter.new(replacer, space);
  printer:write("", o);
  do return _G.table.concat(printer.buf.b) end;
end
__haxe_format_JsonPrinter.prototype = _hx_a();
__haxe_format_JsonPrinter.prototype.buf= nil;
__haxe_format_JsonPrinter.prototype.replacer= nil;
__haxe_format_JsonPrinter.prototype.indent= nil;
__haxe_format_JsonPrinter.prototype.pretty= nil;
__haxe_format_JsonPrinter.prototype.nind= nil;
__haxe_format_JsonPrinter.prototype.write = function(self,k,v) 
  if (self.replacer ~= nil) then 
    v = self:replacer(k, v);
  end;
  local _g = Type.typeof(v);
  local tmp = _g[1];
  if (tmp) == 0 then 
    local _this = self.buf;
    local str = "null";
    _G.table.insert(_this.b, str);
    local _this1 = _this;
    _this1.length = _this1.length + __lua_lib_luautf8_Utf8.len(str);
  elseif (tmp) == 1 then 
    local _this2 = self.buf;
    local str1 = Std.string(v);
    _G.table.insert(_this2.b, str1);
    local _this3 = _this2;
    _this3.length = _this3.length + __lua_lib_luautf8_Utf8.len(str1);
  elseif (tmp) == 2 then 
    local v1 = (function() 
      local _hx_1
      if (Math.isFinite(v)) then 
      _hx_1 = v; else 
      _hx_1 = "null"; end
      return _hx_1
    end )();
    local _this4 = self.buf;
    local str2 = Std.string(v1);
    _G.table.insert(_this4.b, str2);
    local _this5 = _this4;
    _this5.length = _this5.length + __lua_lib_luautf8_Utf8.len(str2);
  elseif (tmp) == 3 then 
    local _this6 = self.buf;
    local str3 = Std.string(v);
    _G.table.insert(_this6.b, str3);
    local _this7 = _this6;
    _this7.length = _this7.length + __lua_lib_luautf8_Utf8.len(str3);
  elseif (tmp) == 4 then 
    self:fieldsString(v, Reflect.fields(v));
  elseif (tmp) == 5 then 
    local _this8 = self.buf;
    local str4 = "\"<fun>\"";
    _G.table.insert(_this8.b, str4);
    local _this9 = _this8;
    _this9.length = _this9.length + __lua_lib_luautf8_Utf8.len(str4);
  elseif (tmp) == 6 then 
    local c = _g[2];
    if (c == String) then 
      self:quote(v);
    else
      if (c == Array) then 
        local v2 = v;
        local _this10 = self.buf;
        _G.table.insert(_this10.b, __lua_lib_luautf8_Utf8.char(91));
        local _this11 = _this10;
        _this11.length = _this11.length + 1;
        local len = v2.length;
        local last = len - 1;
        local _g1 = 0;
        local _g11 = len;
        while (_g1 < _g11) do 
          _g1 = _g1 + 1;
          local i = _g1 - 1;
          if (i > 0) then 
            local _this12 = self.buf;
            _G.table.insert(_this12.b, __lua_lib_luautf8_Utf8.char(44));
            local _this13 = _this12;
            _this13.length = _this13.length + 1;
          else
            self.nind = self.nind + 1;
          end;
          if (self.pretty) then 
            local _this14 = self.buf;
            _G.table.insert(_this14.b, __lua_lib_luautf8_Utf8.char(10));
            local _this15 = _this14;
            _this15.length = _this15.length + 1;
          end;
          if (self.pretty) then 
            local v3 = StringTools.lpad("", self.indent, self.nind * __lua_lib_luautf8_Utf8.len(self.indent));
            local _this16 = self.buf;
            local str5 = Std.string(v3);
            _G.table.insert(_this16.b, str5);
            local _this17 = _this16;
            _this17.length = _this17.length + __lua_lib_luautf8_Utf8.len(str5);
          end;
          self:write(i, v2[i]);
          if (i == last) then 
            self.nind = self.nind - 1;
            if (self.pretty) then 
              local _this18 = self.buf;
              _G.table.insert(_this18.b, __lua_lib_luautf8_Utf8.char(10));
              local _this19 = _this18;
              _this19.length = _this19.length + 1;
            end;
            if (self.pretty) then 
              local v4 = StringTools.lpad("", self.indent, self.nind * __lua_lib_luautf8_Utf8.len(self.indent));
              local _this20 = self.buf;
              local str6 = Std.string(v4);
              _G.table.insert(_this20.b, str6);
              local _this21 = _this20;
              _this21.length = _this21.length + __lua_lib_luautf8_Utf8.len(str6);
            end;
          end;
        end;
        local _this22 = self.buf;
        _G.table.insert(_this22.b, __lua_lib_luautf8_Utf8.char(93));
        local _this23 = _this22;
        _this23.length = _this23.length + 1;
      else
        if (c == __haxe_ds_StringMap) then 
          local v5 = v;
          local o = _hx_e();
          local k1 = v5:keys();
          while (k1:hasNext()) do 
            local k2 = k1:next();
            local ret = v5.h[k2];
            if (ret == __haxe_ds_StringMap.tnull) then 
              ret = nil;
            end;
            o[k2] = ret;
          end;
          local v6 = o;
          self:fieldsString(v6, Reflect.fields(v6));
        else
          if (c == Date) then 
            local v7 = v;
            self:quote(__lua_Boot.dateStr(v7));
          else
            self:classString(v);
          end;
        end;
      end;
    end;
  elseif (tmp) == 7 then 
    local i1 = v[1];
    local _this24 = self.buf;
    local str7 = Std.string(i1);
    _G.table.insert(_this24.b, str7);
    local _this25 = _this24;
    _this25.length = _this25.length + __lua_lib_luautf8_Utf8.len(str7);
  elseif (tmp) == 8 then 
    local _this26 = self.buf;
    local str8 = "\"???\"";
    _G.table.insert(_this26.b, str8);
    local _this27 = _this26;
    _this27.length = _this27.length + __lua_lib_luautf8_Utf8.len(str8); end;
end
__haxe_format_JsonPrinter.prototype.classString = function(self,v) 
  self:fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
end
__haxe_format_JsonPrinter.prototype.fieldsString = function(self,v,fields) 
  local _this = self.buf;
  _G.table.insert(_this.b, __lua_lib_luautf8_Utf8.char(123));
  local _this1 = _this;
  _this1.length = _this1.length + 1;
  local len = fields.length;
  local last = len - 1;
  local first = true;
  local _g = 0;
  local _g1 = len;
  local _hx_continue_1 = false;
  while (_g < _g1) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    local f = fields[i];
    local value = Reflect.field(v, f);
    if (Reflect.isFunction(value)) then 
      break;
    end;
    if (first) then 
      self.nind = self.nind + 1;
      first = false;
    else
      local _this2 = self.buf;
      _G.table.insert(_this2.b, __lua_lib_luautf8_Utf8.char(44));
      local _this3 = _this2;
      _this3.length = _this3.length + 1;
    end;
    if (self.pretty) then 
      local _this4 = self.buf;
      _G.table.insert(_this4.b, __lua_lib_luautf8_Utf8.char(10));
      local _this5 = _this4;
      _this5.length = _this5.length + 1;
    end;
    if (self.pretty) then 
      local v1 = StringTools.lpad("", self.indent, self.nind * __lua_lib_luautf8_Utf8.len(self.indent));
      local _this6 = self.buf;
      local str = Std.string(v1);
      _G.table.insert(_this6.b, str);
      local _this7 = _this6;
      _this7.length = _this7.length + __lua_lib_luautf8_Utf8.len(str);
    end;
    self:quote(f);
    local _this8 = self.buf;
    _G.table.insert(_this8.b, __lua_lib_luautf8_Utf8.char(58));
    local _this9 = _this8;
    _this9.length = _this9.length + 1;
    if (self.pretty) then 
      local _this10 = self.buf;
      _G.table.insert(_this10.b, __lua_lib_luautf8_Utf8.char(32));
      local _this11 = _this10;
      _this11.length = _this11.length + 1;
    end;
    self:write(f, value);
    if (i == last) then 
      self.nind = self.nind - 1;
      if (self.pretty) then 
        local _this12 = self.buf;
        _G.table.insert(_this12.b, __lua_lib_luautf8_Utf8.char(10));
        local _this13 = _this12;
        _this13.length = _this13.length + 1;
      end;
      if (self.pretty) then 
        local v2 = StringTools.lpad("", self.indent, self.nind * __lua_lib_luautf8_Utf8.len(self.indent));
        local _this14 = self.buf;
        local str1 = Std.string(v2);
        _G.table.insert(_this14.b, str1);
        local _this15 = _this14;
        _this15.length = _this15.length + __lua_lib_luautf8_Utf8.len(str1);
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  local _this16 = self.buf;
  _G.table.insert(_this16.b, __lua_lib_luautf8_Utf8.char(125));
  local _this17 = _this16;
  _this17.length = _this17.length + 1;
end
__haxe_format_JsonPrinter.prototype.quote = function(self,s) 
  local _this = self.buf;
  _G.table.insert(_this.b, __lua_lib_luautf8_Utf8.char(34));
  local _this1 = _this;
  _this1.length = _this1.length + 1;
  local i = 0;
  while (true) do 
    i = i + 1;
    local c = __lua_lib_luautf8_Utf8.byte(s, (i - 1) + 1);
    if (c == nil) then 
      break;
    end;
    local c1 = c;
    if (c1) == 8 then 
      local _this2 = self.buf;
      local str = "\\b";
      _G.table.insert(_this2.b, str);
      local _this3 = _this2;
      _this3.length = _this3.length + __lua_lib_luautf8_Utf8.len(str);
    elseif (c1) == 9 then 
      local _this4 = self.buf;
      local str1 = "\\t";
      _G.table.insert(_this4.b, str1);
      local _this5 = _this4;
      _this5.length = _this5.length + __lua_lib_luautf8_Utf8.len(str1);
    elseif (c1) == 10 then 
      local _this6 = self.buf;
      local str2 = "\\n";
      _G.table.insert(_this6.b, str2);
      local _this7 = _this6;
      _this7.length = _this7.length + __lua_lib_luautf8_Utf8.len(str2);
    elseif (c1) == 12 then 
      local _this8 = self.buf;
      local str3 = "\\f";
      _G.table.insert(_this8.b, str3);
      local _this9 = _this8;
      _this9.length = _this9.length + __lua_lib_luautf8_Utf8.len(str3);
    elseif (c1) == 13 then 
      local _this10 = self.buf;
      local str4 = "\\r";
      _G.table.insert(_this10.b, str4);
      local _this11 = _this10;
      _this11.length = _this11.length + __lua_lib_luautf8_Utf8.len(str4);
    elseif (c1) == 34 then 
      local _this12 = self.buf;
      local str5 = "\\\"";
      _G.table.insert(_this12.b, str5);
      local _this13 = _this12;
      _this13.length = _this13.length + __lua_lib_luautf8_Utf8.len(str5);
    elseif (c1) == 92 then 
      local _this14 = self.buf;
      local str6 = "\\\\";
      _G.table.insert(_this14.b, str6);
      local _this15 = _this14;
      _this15.length = _this15.length + __lua_lib_luautf8_Utf8.len(str6);else
    local _this16 = self.buf;
    _G.table.insert(_this16.b, __lua_lib_luautf8_Utf8.char(c));
    local _this17 = _this16;
    _this17.length = _this17.length + 1; end;
  end;
  local _this18 = self.buf;
  _G.table.insert(_this18.b, __lua_lib_luautf8_Utf8.char(34));
  local _this19 = _this18;
  _this19.length = _this19.length + 1;
end

__haxe_format_JsonPrinter.prototype.__class__ =  __haxe_format_JsonPrinter

__haxe_io_Bytes.new = function(length,b) 
  local self = _hx_new(__haxe_io_Bytes.prototype)
  __haxe_io_Bytes.super(self,length,b)
  return self
end
__haxe_io_Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
__haxe_io_Bytes.__name__ = true
__haxe_io_Bytes.alloc = function(length) 
  local a = Array.new();
  local _g = 0;
  local _g1 = length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    a:push(0);
  end;
  do return __haxe_io_Bytes.new(length, a) end;
end
__haxe_io_Bytes.ofString = function(s,encoding) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = _G.string.len(s);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    _g:push(_G.string.byte(s, i + 1));
  end;
  local bytes = _g;
  do return __haxe_io_Bytes.new(bytes.length, bytes) end;
end
__haxe_io_Bytes.prototype = _hx_a();
__haxe_io_Bytes.prototype.length= nil;
__haxe_io_Bytes.prototype.b= nil;
__haxe_io_Bytes.prototype.blit = function(self,pos,src,srcpos,len) 
  if (((((pos < 0) or (srcpos < 0)) or (len < 0)) or ((pos + len) > self.length)) or ((srcpos + len) > src.length)) then 
    _G.error(__haxe_io_Error.OutsideBounds,0);
  end;
  local b1 = self.b;
  local b2 = src.b;
  if ((b1 == b2) and (pos > srcpos)) then 
    local i = len;
    while (i > 0) do 
      i = i - 1;
      b1[i + pos] = b2[i + srcpos];
    end;
    do return end;
  end;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i1 = _g - 1;
    b1[i1 + pos] = b2[i1 + srcpos];
  end;
end
__haxe_io_Bytes.prototype.getString = function(self,pos,len,encoding) 
  local tmp = encoding == nil;
  if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
    _G.error(__haxe_io_Error.OutsideBounds,0);
  end;
  if ((self.b.length - pos) <= __lua_Boot.MAXSTACKSIZE) then 
    local _end = Math.min(self.b.length, pos + len) - 1;
    do return _G.string.char(_hx_table.unpack(self.b, pos, _end)) end;
  else
    local tbl = ({});
    local _g = pos;
    local _g1 = pos + len;
    while (_g < _g1) do 
      _g = _g + 1;
      local idx = _g - 1;
      _G.table.insert(tbl, _G.string.char(self.b[idx]));
    end;
    do return _G.table.concat(tbl, "") end;
  end;
end
__haxe_io_Bytes.prototype.toString = function(self) 
  do return self:getString(0, self.length) end
end

__haxe_io_Bytes.prototype.__class__ =  __haxe_io_Bytes

__haxe_io_BytesBuffer.new = function() 
  local self = _hx_new(__haxe_io_BytesBuffer.prototype)
  __haxe_io_BytesBuffer.super(self)
  return self
end
__haxe_io_BytesBuffer.super = function(self) 
  self.b = Array.new();
end
__haxe_io_BytesBuffer.__name__ = true
__haxe_io_BytesBuffer.prototype = _hx_a();
__haxe_io_BytesBuffer.prototype.b= nil;
__haxe_io_BytesBuffer.prototype.getBytes = function(self) 
  local bytes = __haxe_io_Bytes.new(self.b.length, self.b);
  self.b = nil;
  do return bytes end
end

__haxe_io_BytesBuffer.prototype.__class__ =  __haxe_io_BytesBuffer
_hxClasses["haxe.io.Encoding"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="UTF8","RawNative"},2)}
__haxe_io_Encoding = _hxClasses["haxe.io.Encoding"];
__haxe_io_Encoding.UTF8 = _hx_tab_array({[0]="UTF8",0,__enum__ = __haxe_io_Encoding},2)

__haxe_io_Encoding.RawNative = _hx_tab_array({[0]="RawNative",1,__enum__ = __haxe_io_Encoding},2)


__haxe_io_Eof.new = function() 
  local self = _hx_new(__haxe_io_Eof.prototype)
  __haxe_io_Eof.super(self)
  return self
end
__haxe_io_Eof.super = function(self) 
end
__haxe_io_Eof.__name__ = true
__haxe_io_Eof.prototype = _hx_a();
__haxe_io_Eof.prototype.toString = function(self) 
  do return "Eof" end
end

__haxe_io_Eof.prototype.__class__ =  __haxe_io_Eof
_hxClasses["haxe.io.Error"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Blocked","Overflow","OutsideBounds","Custom"},4)}
__haxe_io_Error = _hxClasses["haxe.io.Error"];
__haxe_io_Error.Blocked = _hx_tab_array({[0]="Blocked",0,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Overflow = _hx_tab_array({[0]="Overflow",1,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.OutsideBounds = _hx_tab_array({[0]="OutsideBounds",2,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Custom = function(e) local _x = _hx_tab_array({[0]="Custom",3,e,__enum__=__haxe_io_Error}, 3); return _x; end 

__haxe_io_Input.new = {}
__haxe_io_Input.__name__ = true
__haxe_io_Input.prototype = _hx_a();
__haxe_io_Input.prototype.bigEndian= nil;
__haxe_io_Input.prototype.readByte = function(self) 
  _G.error("Not implemented",0);
end
__haxe_io_Input.prototype.readBytes = function(self,s,pos,len) 
  local k = len;
  local b = s.b;
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_io_Error.OutsideBounds,0);
  end;
  local _hx_status, _hx_result = pcall(function() 
  
      while (k > 0) do 
        b[pos] = self:readByte();
        pos = pos + 1;
        k = k - 1;
      end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
  
    local _hx_1 = _hx_result
    if( __lua_Boot.__instanceof(_hx_1,__haxe_io_Eof) ) then 
      local eof = _hx_1
    else _G.error(_hx_1)
    end
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  do return len - k end
end
__haxe_io_Input.prototype.set_bigEndian = function(self,b) 
  self.bigEndian = b;
  do return b end
end
__haxe_io_Input.prototype.readAll = function(self,bufsize) 
  if (bufsize == nil) then 
    bufsize = 16384;
  end;
  local buf = __haxe_io_Bytes.alloc(bufsize);
  local total = __haxe_io_BytesBuffer.new();
  local _hx_status, _hx_result = pcall(function() 
  
      while (true) do 
        local len = self:readBytes(buf, 0, bufsize);
        if (len == 0) then 
          _G.error(__haxe_io_Error.Blocked,0);
        end;
        if ((len < 0) or (len > buf.length)) then 
          _G.error(__haxe_io_Error.OutsideBounds,0);
        end;
        local b1 = total.b;
        local b2 = buf.b;
        local _g = 0;
        local _g1 = len;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          total.b:push(b2[i]);
        end;
      end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
  
    local _hx_1 = _hx_result
    if( __lua_Boot.__instanceof(_hx_1,__haxe_io_Eof) ) then 
      local e = _hx_1
    else _G.error(_hx_1)
    end
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  do return total:getBytes() end
end

__haxe_io_Input.prototype.__class__ =  __haxe_io_Input

__haxe_io_Output.new = {}
__haxe_io_Output.__name__ = true
__haxe_io_Output.prototype = _hx_a();
__haxe_io_Output.prototype.bigEndian= nil;
__haxe_io_Output.prototype.writeByte = function(self,c) 
  _G.error("Not implemented",0);
end
__haxe_io_Output.prototype.writeBytes = function(self,s,pos,len) 
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_io_Error.OutsideBounds,0);
  end;
  local b = s.b;
  local k = len;
  while (k > 0) do 
    self:writeByte(b[pos]);
    pos = pos + 1;
    k = k - 1;
  end;
  do return len end
end
__haxe_io_Output.prototype.set_bigEndian = function(self,b) 
  self.bigEndian = b;
  do return b end
end
__haxe_io_Output.prototype.writeFullBytes = function(self,s,pos,len) 
  while (len > 0) do 
    local k = self:writeBytes(s, pos, len);
    pos = pos + k;
    len = len - k;
  end;
end
__haxe_io_Output.prototype.writeString = function(self,s,encoding) 
  local b = __haxe_io_Bytes.ofString(s, encoding);
  self:writeFullBytes(b, 0, b.length);
end

__haxe_io_Output.prototype.__class__ =  __haxe_io_Output

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return true end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl2 = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl2 ~= nil) then 
          _hx_1 = cl2; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g = 2;
    local _g1 = o.length;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  local _g = type(o);
  if (_g) == "boolean" then 
    do return tostring(o) end;
  elseif (_g) == "function" then 
    do return "<function>" end;
  elseif (_g) == "nil" then 
    do return "null" end;
  elseif (_g) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g) == "string" then 
    do return o end;
  elseif (_g) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (__lua_lib_luautf8_Utf8.len(s) > 5) then 
            do return "[...]" end;
          else
            local _g1 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g1:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g1:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(Std.string(o[f1])));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g) == "thread" then 
    do return "<thread>" end;
  elseif (_g) == "userdata" then 
    local mt = _G.getmetatable(o);
    if ((mt ~= nil) and (mt.__tostring ~= nil)) then 
      do return _G.tostring(o) end;
    else
      do return "<userdata>" end;
    end;else
  _G.error("Unknown Lua type",0); end;
end
__lua_Boot.dateStr = function(date) 
  local m = date:getMonth() + 1;
  local d = date:getDate();
  local h = date:getHours();
  local mi = date:getMinutes();
  local s = date:getSeconds();
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(date:getFullYear()) .. Std.string("-")) .. Std.string(((function() 
    local _hx_1
    if (m < 10) then 
    _hx_1 = Std.string("0") .. Std.string(m); else 
    _hx_1 = Std.string("") .. Std.string(m); end
    return _hx_1
  end )()))) .. Std.string("-")) .. Std.string(((function() 
    local _hx_2
    if (d < 10) then 
    _hx_2 = Std.string("0") .. Std.string(d); else 
    _hx_2 = Std.string("") .. Std.string(d); end
    return _hx_2
  end )()))) .. Std.string(" ")) .. Std.string(((function() 
    local _hx_3
    if (h < 10) then 
    _hx_3 = Std.string("0") .. Std.string(h); else 
    _hx_3 = Std.string("") .. Std.string(h); end
    return _hx_3
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_4
    if (mi < 10) then 
    _hx_4 = Std.string("0") .. Std.string(mi); else 
    _hx_4 = Std.string("") .. Std.string(mi); end
    return _hx_4
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_5
    if (s < 10) then 
    _hx_5 = Std.string("0") .. Std.string(s); else 
    _hx_5 = Std.string("") .. Std.string(s); end
    return _hx_5
  end )())) end;
end
__lua_Boot.strDate = function(s) 
  local _g = __lua_lib_luautf8_Utf8.len(s);
  if (_g) == 8 then 
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    local delim_offset = (function() 
      local _hx_1
      if (__lua_lib_luautf8_Utf8.len(":") > 0) then 
      _hx_1 = __lua_lib_luautf8_Utf8.len(":"); else 
      _hx_1 = 1; end
      return _hx_1
    end )();
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len(":") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(s, ":", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(s)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(s, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len(":");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(s, idx, __lua_lib_luautf8_Utf8.len(s)));
        idx = nil;
      end;
    end;
    local k = ret;
    local t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=0,month=1,day=1,hour=_G.tonumber(k[0]),min=_G.tonumber(k[1]),sec=_G.tonumber(k[2])}));
    local d = _hx_e();
    _G.setmetatable(d, _hx_o({__fields__={__index=true},__index=Date.prototype}));
    d.t = t / 1000;
    d.d = _G.os.date("*t", Std.int(d.t));
    do return d end;
  elseif (_g) == 10 then 
    local idx1 = 1;
    local ret1 = _hx_tab_array({}, 0);
    local delim_offset1 = (function() 
      local _hx_2
      if (__lua_lib_luautf8_Utf8.len("-") > 0) then 
      _hx_2 = __lua_lib_luautf8_Utf8.len("-"); else 
      _hx_2 = 1; end
      return _hx_2
    end )();
    while (idx1 ~= nil) do 
      local newidx1 = 0;
      if (__lua_lib_luautf8_Utf8.len("-") > 0) then 
        newidx1 = __lua_lib_luautf8_Utf8.find(s, "-", idx1, true);
      else
        if (idx1 >= __lua_lib_luautf8_Utf8.len(s)) then 
          newidx1 = nil;
        else
          newidx1 = idx1 + 1;
        end;
      end;
      if (newidx1 ~= nil) then 
        local match1 = __lua_lib_luautf8_Utf8.sub(s, idx1, newidx1 - 1);
        ret1:push(match1);
        idx1 = newidx1 + __lua_lib_luautf8_Utf8.len("-");
      else
        ret1:push(__lua_lib_luautf8_Utf8.sub(s, idx1, __lua_lib_luautf8_Utf8.len(s)));
        idx1 = nil;
      end;
    end;
    local k1 = ret1;
    do return Date.new(_G.tonumber(k1[0]), _G.tonumber(k1[1]) - 1, _G.tonumber(k1[2]), 0, 0, 0) end;
  elseif (_g) == 19 then 
    local idx2 = 1;
    local ret2 = _hx_tab_array({}, 0);
    local delim_offset2 = (function() 
      local _hx_3
      if (__lua_lib_luautf8_Utf8.len(" ") > 0) then 
      _hx_3 = __lua_lib_luautf8_Utf8.len(" "); else 
      _hx_3 = 1; end
      return _hx_3
    end )();
    while (idx2 ~= nil) do 
      local newidx2 = 0;
      if (__lua_lib_luautf8_Utf8.len(" ") > 0) then 
        newidx2 = __lua_lib_luautf8_Utf8.find(s, " ", idx2, true);
      else
        if (idx2 >= __lua_lib_luautf8_Utf8.len(s)) then 
          newidx2 = nil;
        else
          newidx2 = idx2 + 1;
        end;
      end;
      if (newidx2 ~= nil) then 
        local match2 = __lua_lib_luautf8_Utf8.sub(s, idx2, newidx2 - 1);
        ret2:push(match2);
        idx2 = newidx2 + __lua_lib_luautf8_Utf8.len(" ");
      else
        ret2:push(__lua_lib_luautf8_Utf8.sub(s, idx2, __lua_lib_luautf8_Utf8.len(s)));
        idx2 = nil;
      end;
    end;
    local k2 = ret2;
    local _this = k2[0];
    local idx3 = 1;
    local ret3 = _hx_tab_array({}, 0);
    local delim_offset3 = (function() 
      local _hx_4
      if (__lua_lib_luautf8_Utf8.len("-") > 0) then 
      _hx_4 = __lua_lib_luautf8_Utf8.len("-"); else 
      _hx_4 = 1; end
      return _hx_4
    end )();
    while (idx3 ~= nil) do 
      local newidx3 = 0;
      if (__lua_lib_luautf8_Utf8.len("-") > 0) then 
        newidx3 = __lua_lib_luautf8_Utf8.find(_this, "-", idx3, true);
      else
        if (idx3 >= __lua_lib_luautf8_Utf8.len(_this)) then 
          newidx3 = nil;
        else
          newidx3 = idx3 + 1;
        end;
      end;
      if (newidx3 ~= nil) then 
        local match3 = __lua_lib_luautf8_Utf8.sub(_this, idx3, newidx3 - 1);
        ret3:push(match3);
        idx3 = newidx3 + __lua_lib_luautf8_Utf8.len("-");
      else
        ret3:push(__lua_lib_luautf8_Utf8.sub(_this, idx3, __lua_lib_luautf8_Utf8.len(_this)));
        idx3 = nil;
      end;
    end;
    local y = ret3;
    local _this1 = k2[1];
    local idx4 = 1;
    local ret4 = _hx_tab_array({}, 0);
    local delim_offset4 = (function() 
      local _hx_5
      if (__lua_lib_luautf8_Utf8.len(":") > 0) then 
      _hx_5 = __lua_lib_luautf8_Utf8.len(":"); else 
      _hx_5 = 1; end
      return _hx_5
    end )();
    while (idx4 ~= nil) do 
      local newidx4 = 0;
      if (__lua_lib_luautf8_Utf8.len(":") > 0) then 
        newidx4 = __lua_lib_luautf8_Utf8.find(_this1, ":", idx4, true);
      else
        if (idx4 >= __lua_lib_luautf8_Utf8.len(_this1)) then 
          newidx4 = nil;
        else
          newidx4 = idx4 + 1;
        end;
      end;
      if (newidx4 ~= nil) then 
        local match4 = __lua_lib_luautf8_Utf8.sub(_this1, idx4, newidx4 - 1);
        ret4:push(match4);
        idx4 = newidx4 + __lua_lib_luautf8_Utf8.len(":");
      else
        ret4:push(__lua_lib_luautf8_Utf8.sub(_this1, idx4, __lua_lib_luautf8_Utf8.len(_this1)));
        idx4 = nil;
      end;
    end;
    local t1 = ret4;
    local tmp = _G.tonumber(y[1]) - 1;
    local tmp1 = _G.tonumber(y[2]);
    local tmp2 = _G.tonumber(t1[0]);
    local tmp3 = _G.tonumber(t1[1]);
    local tmp4 = _G.tonumber(t1[2]);
    do return Date.new(y[0], tmp, tmp1, tmp2, tmp3, tmp4) end;else
  _G.error(Std.string("Invalid date format : ") .. Std.string(s),0); end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end
__lua_Boot.systemName = function() 
  local os = nil;
  if ((jit ~= nil) and (jit.os ~= nil)) then 
    os = jit.os;
    os = __lua_lib_luautf8_Utf8.lower(os);
  else
    local popen_status = false;
    local popen_result = nil;
    popen_status, popen_result = pcall(_G.io.popen, '');
    if (popen_status) then 
      popen_result:close();
      os = __lua_lib_luautf8_Utf8.lower(_G.io.popen("uname -s", "r"):read("*l"));
    else
      os = __lua_lib_luautf8_Utf8.lower(_G.os.getenv("OS"));
    end;
  end;
  local k = __lua_Boot.os_patterns:keys();
  while (k:hasNext()) do 
    local k1 = k:next();
    local _g = 0;
    local ret = __lua_Boot.os_patterns.h[k1];
    if (ret == __haxe_ds_StringMap.tnull) then 
      ret = nil;
    end;
    local _g1 = ret;
    while (_g < _g1.length) do 
      local p = _g1[_g];
      _g = _g + 1;
      if (_G.string.match(os, p) ~= nil) then 
        do return k1 end;
      end;
    end;
  end;
  do return nil end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Lib.new = {}
__lua_Lib.__name__ = true
__lua_Lib.fillArray = function(itr) 
  local i = nil;
  local ret = _hx_tab_array({}, 0);
  while (true) do 
    i = itr();
    if (not (i ~= nil)) then 
      break;
    end;
    ret:push(i);
  end;
  do return ret end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__sys_FileSystem.new = {}
__sys_FileSystem.__name__ = true
__sys_FileSystem.exists = function(path) 
  if (path == nil) then 
    do return false end;
  else
    local _hx_1_res_result, _hx_1_res_message = __lua_lib_luv_fs_FileSystem.fs_stat(path);
    do return _hx_1_res_result ~= nil end;
  end;
end

__sys_io_File.new = {}
__sys_io_File.__name__ = true
__sys_io_File.append = function(path,binary) 
  if (binary == nil) then 
    binary = true;
  end;
  do return __sys_io_FileOutput.new(_G.io.open(path, "a")) end;
end
__sys_io_File.read = function(path,binary) 
  if (binary == nil) then 
    binary = true;
  end;
  local fh = _G.io.open(path, (function() 
    local _hx_1
    if (binary) then 
    _hx_1 = "rb"; else 
    _hx_1 = "r"; end
    return _hx_1
  end )());
  if (fh == nil) then 
    _G.error(Std.string("Invalid path : ") .. Std.string(path),0);
  end;
  do return __sys_io_FileInput.new(fh) end;
end

__sys_io_FileInput.new = function(f) 
  local self = _hx_new(__sys_io_FileInput.prototype)
  __sys_io_FileInput.super(self,f)
  return self
end
__sys_io_FileInput.super = function(self,f) 
  if (f == nil) then 
    _G.error(Std.string("Invalid filehandle : ") .. Std.string(Std.string(f)),0);
  end;
  self:set_bigEndian(__lua_Boot.platformBigEndian);
  self.f = f;
  self._eof = false;
end
__sys_io_FileInput.__name__ = true
__sys_io_FileInput.prototype = _hx_a();
__sys_io_FileInput.prototype.f= nil;
__sys_io_FileInput.prototype._eof= nil;
__sys_io_FileInput.prototype.readByte = function(self) 
  local byte = self.f:read(1);
  if (byte == nil) then 
    self._eof = true;
    _G.error(__haxe_io_Eof.new(),0);
  end;
  do return _G.string.byte(byte) end
end
__sys_io_FileInput.prototype.readAll = function(self,bufsize) 
  if (bufsize == nil) then 
    bufsize = 16384;
  end;
  local buf = __haxe_io_Bytes.alloc(bufsize);
  local total = __haxe_io_BytesBuffer.new();
  local _hx_status, _hx_result = pcall(function() 
  
      while (true) do 
        local len = self:readBytes(buf, 0, bufsize);
        if (len == 0) then 
          break;
        end;
        if ((len < 0) or (len > buf.length)) then 
          _G.error(__haxe_io_Error.OutsideBounds,0);
        end;
        local b1 = total.b;
        local b2 = buf.b;
        local _g = 0;
        local _g1 = len;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          total.b:push(b2[i]);
        end;
      end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
  
    local _hx_1 = _hx_result
    if( __lua_Boot.__instanceof(_hx_1,__haxe_io_Eof) ) then 
      local e = _hx_1
      self._eof = true;
    else _G.error(_hx_1)
    end
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  do return total:getBytes() end
end

__sys_io_FileInput.prototype.__class__ =  __sys_io_FileInput
__sys_io_FileInput.__super__ = __haxe_io_Input
setmetatable(__sys_io_FileInput.prototype,{__index=__haxe_io_Input.prototype})

__sys_io_FileOutput.new = function(f) 
  local self = _hx_new(__sys_io_FileOutput.prototype)
  __sys_io_FileOutput.super(self,f)
  return self
end
__sys_io_FileOutput.super = function(self,f) 
  if (f == nil) then 
    _G.error(Std.string("Invalid filehandle : ") .. Std.string(Std.string(f)),0);
  end;
  self.f = f;
end
__sys_io_FileOutput.__name__ = true
__sys_io_FileOutput.prototype = _hx_a();
__sys_io_FileOutput.prototype.f= nil;
__sys_io_FileOutput.prototype.writeByte = function(self,c) 
  self.f:write(__lua_lib_luautf8_Utf8.char(c));
end
__sys_io_FileOutput.prototype.close = function(self) 
  self.f:close();
end

__sys_io_FileOutput.prototype.__class__ =  __sys_io_FileOutput
__sys_io_FileOutput.__super__ = __haxe_io_Output
setmetatable(__sys_io_FileOutput.prototype,{__index=__haxe_io_Output.prototype})

__sys_io_Process.new = function(cmd,args,detached) 
  local self = _hx_new(__sys_io_Process.prototype)
  __sys_io_Process.super(self,cmd,args,detached)
  return self
end
__sys_io_Process.super = function(self,cmd,args,detached) 
  local _gthis = self;
  if (detached) then 
    _G.error("Detached process is not supported on this platform",0);
  end;
  local _stdout = __lua_lib_luv_Pipe.new_pipe(false);
  local _stderr = __lua_lib_luv_Pipe.new_pipe(false);
  local _stdin = __lua_lib_luv_Pipe.new_pipe(false);
  self.stdout = __sys_io__Process_ProcessInput.new(_stdout);
  self.stderr = __sys_io__Process_ProcessInput.new(_stderr);
  self.stdin = __sys_io__Process_ProcessOutput.new(_stdin);
  local stdio = ({_stdin,_stdout,_stderr});
  local opt = _hx_o({__fields__={args=true,stdio=true},args=__sys_io_Process.setArgs(cmd, args),stdio=stdio});
  local _hx_1_p_handle, _hx_1_p_pid = __lua_lib_luv_Process.spawn(__sys_io_Process._shell, opt, function(code,signal) 
    _gthis._code = code;
  end);
  if (_hx_1_p_handle == nil) then 
    _G.error(_hx_1_p_pid,0);
  end;
  self._pid = _hx_1_p_pid;
  self._handle = _hx_1_p_handle;
end
__sys_io_Process.__name__ = true
__sys_io_Process.setArgs = function(cmd,args) 
  local pargs = ({});
  local idx = 1;
  if (__sys_FileSystem.exists(cmd)) then 
    cmd = Std.string(Std.string("\"") .. Std.string(cmd)) .. Std.string("\"");
  end;
  local all = _hx_tab_array({[0]=cmd}, 1);
  if (args ~= nil) then 
    local _g = 0;
    while (_g < args.length) do 
      local a = args[_g];
      _g = _g + 1;
      all:push(__sys_io_Process.argQuote(a));
    end;
  end;
  if (Sys.systemName() == "Windows") then 
    idx = idx + 1;
    pargs[idx - 1] = "/s";
    idx = idx + 1;
    pargs[idx - 1] = "/c";
    idx = idx + 1;
    pargs[idx - 1] = all:join(" ");
  else
    idx = idx + 1;
    pargs[idx - 1] = "-c";
    idx = idx + 1;
    pargs[idx - 1] = all:join(" ");
  end;
  do return pargs end;
end
__sys_io_Process.prototype = _hx_a();
__sys_io_Process.prototype._pid= nil;
__sys_io_Process.prototype._handle= nil;
__sys_io_Process.prototype._code= nil;
__sys_io_Process.prototype.stdout= nil;
__sys_io_Process.prototype.stderr= nil;
__sys_io_Process.prototype.stdin= nil;
__sys_io_Process.prototype.exitCode = function(self,block) 
  if (block == nil) then 
    block = true;
  end;
  if (not block) then 
    do return self._code end;
  end;
  while (self._handle:is_active()) do 
    __lua_lib_luv_Loop.run();
  end;
  do return self._code end
end

__sys_io_Process.prototype.__class__ =  __sys_io_Process

__sys_io__Process_ProcessInput.new = function(pipe) 
  local self = _hx_new(__sys_io__Process_ProcessInput.prototype)
  __sys_io__Process_ProcessInput.super(self,pipe)
  return self
end
__sys_io__Process_ProcessInput.super = function(self,pipe) 
  self.b = pipe;
end
__sys_io__Process_ProcessInput.__name__ = true
__sys_io__Process_ProcessInput.prototype = _hx_a();
__sys_io__Process_ProcessInput.prototype.b= nil;
__sys_io__Process_ProcessInput.prototype.buf= nil;
__sys_io__Process_ProcessInput.prototype.idx= nil;
__sys_io__Process_ProcessInput.prototype.readByte = function(self) 
  local _gthis = self;
  local err_str = nil;
  if ((self.buf == nil) or (self.idx >= _G.string.len(self.buf))) then 
    self.buf = nil;
    self.idx = 0;
    local pending = true;
    self.b:read_start(function(err,chunk) 
      if (chunk ~= nil) then 
        _gthis.buf = chunk;
      end;
      if (err ~= nil) then 
        err_str = err;
      end;
      pending = false;
    end);
    while (pending) do 
      __lua_lib_luv_Loop.run();
    end;
  end;
  if (self.buf == nil) then 
    _G.error(__haxe_io_Eof.new(),0);
  end;
  if (err_str ~= nil) then 
    _G.error(err_str,0);
  end;
  local code = _G.string.byte(self.buf, (function() 
  local _hx_obj = self;
  local _hx_fld = 'idx';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)());
  do return code end
end
__sys_io__Process_ProcessInput.prototype.readAll = function(self,bufsize) 
  if (bufsize == nil) then 
    bufsize = 16384;
  end;
  local buf = __haxe_io_Bytes.alloc(bufsize);
  local total = __haxe_io_BytesBuffer.new();
  local _hx_status, _hx_result = pcall(function() 
  
      while (true) do 
        local len = self:readBytes(buf, 0, bufsize);
        if (len ~= 0) then 
          if ((len < 0) or (len > buf.length)) then 
            _G.error(__haxe_io_Error.OutsideBounds,0);
          end;
          local b1 = total.b;
          local b2 = buf.b;
          local _g = 0;
          local _g1 = len;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            total.b:push(b2[i]);
          end;
        end;
        if (len < bufsize) then 
          break;
        end;
      end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
  
    local _hx_1 = _hx_result
    if( __lua_Boot.__instanceof(_hx_1,__haxe_io_Eof) ) then 
      local e = _hx_1
    else _G.error(_hx_1)
    end
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  do return total:getBytes() end
end

__sys_io__Process_ProcessInput.prototype.__class__ =  __sys_io__Process_ProcessInput
__sys_io__Process_ProcessInput.__super__ = __haxe_io_Input
setmetatable(__sys_io__Process_ProcessInput.prototype,{__index=__haxe_io_Input.prototype})

__sys_io__Process_ProcessOutput.new = function(pipe) 
  local self = _hx_new(__sys_io__Process_ProcessOutput.prototype)
  __sys_io__Process_ProcessOutput.super(self,pipe)
  return self
end
__sys_io__Process_ProcessOutput.super = function(self,pipe) 
  self.b = pipe;
  self:set_bigEndian(__lua_Boot.platformBigEndian);
end
__sys_io__Process_ProcessOutput.__name__ = true
__sys_io__Process_ProcessOutput.prototype = _hx_a();
__sys_io__Process_ProcessOutput.prototype.b= nil;
__sys_io__Process_ProcessOutput.prototype.writeByte = function(self,c) 
  self.b:write(_G.string.char(c));
end

__sys_io__Process_ProcessOutput.prototype.__class__ =  __sys_io__Process_ProcessOutput
__sys_io__Process_ProcessOutput.__super__ = __haxe_io_Output
setmetatable(__sys_io__Process_ProcessOutput.prototype,{__index=__haxe_io_Output.prototype})
_hx_bit_clamp = function(v) 
  if v <= 2147483647 and v >= -2147483648 then
    if v > 0 then return _G.math.floor(v)
    else return _G.math.ceil(v)
    end
  end
  if v > 2251798999999999 then v = v*2 end;
  if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
  return _hx_bit.band(v, 2147483647 ) - math.abs(_hx_bit.band(v, 2147483648))
end
pcall(require, 'bit')
if bit then
  _hx_bit = bit
elseif bit32 then
  local _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
else
  _G.error("Bitop library is missing.  Please install luabitop");
end
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  EReg.FLAGS = __lua_lib_lrexlib_Rex.flags();
  StringTools.winMetaCharacters = _hx_tab_array({[0]=32, 40, 41, 37, 33, 94, 34, 60, 62, 38, 124, 10, 13, 44, 59}, 15);
  __com_hurlant_crypto_encoding_Charsets.UTF8 = __com_hurlant_crypto_encoding_UTF8.new();
  __com_hurlant_crypto_encoding_Charsets.UTF16_LE = __com_hurlant_crypto_encoding_UTF16.new(__com_hurlant_util_Endian.LITTLE_ENDIAN);
  __com_hurlant_crypto_encoding_Charsets.UTF16_BE = __com_hurlant_crypto_encoding_UTF16.new(__com_hurlant_util_Endian.BIG_ENDIAN);
  __com_hurlant_crypto_encoding_Charsets.UTF16 = __com_hurlant_crypto_encoding_Charsets.UTF16_LE;
  __com_hurlant_crypto_encoding_Charsets.UCS2 = __com_hurlant_crypto_encoding_Charsets.UTF16_LE;
  __com_hurlant_crypto_encoding_Charsets.ASCII = __com_hurlant_crypto_encoding_ASCII.new();
  __com_hurlant_crypto_encoding_Charsets.LATIN1 = __com_hurlant_crypto_encoding_Charsets.ASCII;
  __com_hurlant_crypto_encoding_Charsets.ISO_8859_1 = __com_hurlant_crypto_encoding_Charsets.ASCII;
  __com_hurlant_crypto_encoding_binary_BinaryEncodings.BASE64 = __com_hurlant_crypto_encoding_binary_Base64.new();
  __com_hurlant_crypto_encoding_binary_BinaryEncodings.BASE16 = __com_hurlant_crypto_encoding_binary_Base16.new();
  __com_hurlant_crypto_encoding_binary_BinaryEncodings.HEX = __com_hurlant_crypto_encoding_binary_BinaryEncodings.BASE16;
  __com_hurlant_crypto_prng_ARC4.psize = 256;
  __com_hurlant_util_Base64._encodeChars = __com_hurlant_util_Base64._initEncoreChar();
  __com_hurlant_util_Base64._decodeChars = __com_hurlant_util_Base64._initDecodeChar();
  __com_hurlant_util_CType.DIGITS = "0123456789abcdefghijklmnopqrstuvwxyz";
  __haxe_ds_StringMap.tnull = ({});
  __lua_Boot.MAXSTACKSIZE = 1000;
  __lua_Boot.platformBigEndian = _G.string.byte(_G.string.dump(function() 
  end), 7) > 0;
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  __lua_Boot.os_patterns = (function() 
    local _hx_1
    
    local _g = __haxe_ds_StringMap.new();
    
    local value = _hx_tab_array({[0]="windows", "^mingw", "^cygwin"}, 3);
    if (value == nil) then 
      _g.h.Windows = __haxe_ds_StringMap.tnull;
    else
      _g.h.Windows = value;
    end;
    
    local value1 = _hx_tab_array({[0]="linux"}, 1);
    if (value1 == nil) then 
      _g.h.Linux = __haxe_ds_StringMap.tnull;
    else
      _g.h.Linux = value1;
    end;
    
    local value2 = _hx_tab_array({[0]="mac", "darwin", "osx"}, 3);
    if (value2 == nil) then 
      _g.h.Mac = __haxe_ds_StringMap.tnull;
    else
      _g.h.Mac = value2;
    end;
    
    local value3 = _hx_tab_array({[0]="bsd$"}, 1);
    if (value3 == nil) then 
      _g.h.BSD = __haxe_ds_StringMap.tnull;
    else
      _g.h.BSD = value3;
    end;
    
    local value4 = _hx_tab_array({[0]="SunOS"}, 1);
    if (value4 == nil) then 
      _g.h.Solaris = __haxe_ds_StringMap.tnull;
    else
      _g.h.Solaris = value4;
    end;
    
    _hx_1 = _g;
    return _hx_1
  end )();
  __sys_io_Process.argQuote = (function() 
    local _hx_2
    if (Sys.systemName() == "Windows") then 
    _hx_2 = function(x) 
      do return StringTools.quoteWinArg(x, true) end;
    end; else 
    _hx_2 = StringTools.quoteUnixArg; end
    return _hx_2
  end )();
  __sys_io_Process._shell = (function() 
    local _hx_3
    if (Sys.systemName() == "Windows") then 
    _hx_3 = "cmd.exe"; else 
    _hx_3 = "/bin/sh"; end
    return _hx_3
  end )();
  
  if (__lua_lib_lrexlib_Rex == nil) then 
    _G.error("Rex is missing.  Please install lrexlib-pcre.",0);
  end;
  String.__name__ = true;
  Array.__name__ = true;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then 
    return function(self,...) 
      return f(...) 
    end
  else 
    return f
  end
end
_G.math.randomseed(_G.os.time());
_hx_print = print or (function() end)
_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;
_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end
_hx_static_init();
Main.main()
